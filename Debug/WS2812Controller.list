
WS2812Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007698  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08007828  08007828  00017828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b88  08007b88  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b90  08007b90  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000364  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001085e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002614  00000000  00000000  0003092d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f10  00000000  00000000  00032f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bc2  00000000  00000000  00033e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000212c2  00000000  00000000  00034a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000123a2  00000000  00000000  00055cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce313  00000000  00000000  0006807e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004844  00000000  00000000  00136394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0013abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007810 	.word	0x08007810

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007810 	.word	0x08007810

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <WS2812_Init>:
        pulseWith = LOW_BIT; // Adjust based on your timing requirements
    }
}

void WS2812_Init(WS2812Controller *controller, TIM_HandleTypeDef *htim, UART_HandleTypeDef *huart, uint32_t channel, uint16_t numLeds)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
    char str[] = "WS2812_Init\r\n";
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <WS2812_Init+0x80>)
 8000ec8:	f107 0410 	add.w	r4, r7, #16
 8000ecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ece:	c407      	stmia	r4!, {r0, r1, r2}
 8000ed0:	8023      	strh	r3, [r4, #0]
    controller->huart = huart;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	605a      	str	r2, [r3, #4]
    controller->htim = htim;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	601a      	str	r2, [r3, #0]
    controller->channel = channel;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	609a      	str	r2, [r3, #8]
    controller->numLeds = numLeds;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ee8:	819a      	strh	r2, [r3, #12]
    for (uint16_t i = 0; i < controller->numLeds * 3; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	83fb      	strh	r3, [r7, #30]
 8000eee:	e007      	b.n	8000f00 <WS2812_Init+0x48>
    {
        controller->ledData[i] = 0;
 8000ef0:	8bfb      	ldrh	r3, [r7, #30]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	739a      	strb	r2, [r3, #14]
    for (uint16_t i = 0; i < controller->numLeds * 3; i++)
 8000efa:	8bfb      	ldrh	r3, [r7, #30]
 8000efc:	3301      	adds	r3, #1
 8000efe:	83fb      	strh	r3, [r7, #30]
 8000f00:	8bfa      	ldrh	r2, [r7, #30]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	899b      	ldrh	r3, [r3, #12]
 8000f06:	4619      	mov	r1, r3
 8000f08:	460b      	mov	r3, r1
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	440b      	add	r3, r1
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbee      	blt.n	8000ef0 <WS2812_Init+0x38>
    }
    HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	685c      	ldr	r4, [r3, #4]
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff f958 	bl	80001d0 <strlen>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f107 0110 	add.w	r1, r7, #16
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f004 fb70 	bl	8005610 <HAL_UART_Transmit>
}
 8000f30:	bf00      	nop
 8000f32:	3724      	adds	r7, #36	; 0x24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	08007828 	.word	0x08007828

08000f3c <WS2812_SetColor>:

void WS2812_SetColor(WS2812Controller *controller, uint16_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b098      	sub	sp, #96	; 0x60
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	807b      	strh	r3, [r7, #2]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	707b      	strb	r3, [r7, #1]
 8000f52:	4613      	mov	r3, r2
 8000f54:	703b      	strb	r3, [r7, #0]
    char str[80];
    if (index < controller->numLeds)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	899b      	ldrh	r3, [r3, #12]
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f080 808b 	bcs.w	8001078 <WS2812_SetColor+0x13c>
    {
        float angle = 90 - controller->brightness; // in Grad
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000f68:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f74:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        angle = angle * _PI / 180;                 // in Rad
 8000f78:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001080 <WS2812_SetColor+0x144>
 8000f7c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f84:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001084 <WS2812_SetColor+0x148>
 8000f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // Apply brightness
        red = red / tan(angle);
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fac6 	bl	8000524 <__aeabi_i2d>
 8000f98:	4604      	mov	r4, r0
 8000f9a:	460d      	mov	r5, r1
 8000f9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f9e:	f7ff fad3 	bl	8000548 <__aeabi_f2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	ec43 2b10 	vmov	d0, r2, r3
 8000faa:	f005 fb91 	bl	80066d0 <tan>
 8000fae:	ec53 2b10 	vmov	r2, r3, d0
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	f7ff fc49 	bl	800084c <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fddb 	bl	8000b7c <__aeabi_d2uiz>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	707b      	strb	r3, [r7, #1]
        green = green / tan(angle);
 8000fca:	783b      	ldrb	r3, [r7, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff faa9 	bl	8000524 <__aeabi_i2d>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	460d      	mov	r5, r1
 8000fd6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fd8:	f7ff fab6 	bl	8000548 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	ec43 2b10 	vmov	d0, r2, r3
 8000fe4:	f005 fb74 	bl	80066d0 <tan>
 8000fe8:	ec53 2b10 	vmov	r2, r3, d0
 8000fec:	4620      	mov	r0, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	f7ff fc2c 	bl	800084c <__aeabi_ddiv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fdbe 	bl	8000b7c <__aeabi_d2uiz>
 8001000:	4603      	mov	r3, r0
 8001002:	703b      	strb	r3, [r7, #0]
        blue = blue / tan(angle);
 8001004:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa8b 	bl	8000524 <__aeabi_i2d>
 800100e:	4604      	mov	r4, r0
 8001010:	460d      	mov	r5, r1
 8001012:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	ec43 2b10 	vmov	d0, r2, r3
 8001020:	f005 fb56 	bl	80066d0 <tan>
 8001024:	ec53 2b10 	vmov	r2, r3, d0
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	f7ff fc0e 	bl	800084c <__aeabi_ddiv>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fda0 	bl	8000b7c <__aeabi_d2uiz>
 800103c:	4603      	mov	r3, r0
 800103e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        sprintf(str, "\tGREEN [%ld]\r\n", green);
        HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
        sprintf(str, "\tBLUE  [%ld]\r\n", blue);
        HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
#endif
        controller->ledData[index * 3] = green;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	783a      	ldrb	r2, [r7, #0]
 8001050:	739a      	strb	r2, [r3, #14]
        controller->ledData[index * 3 + 1] = red;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	3301      	adds	r3, #1
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	787a      	ldrb	r2, [r7, #1]
 8001062:	739a      	strb	r2, [r3, #14]
        controller->ledData[index * 3 + 2] = blue;
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	3302      	adds	r3, #2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8001076:	739a      	strb	r2, [r3, #14]
        HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
        sprintf(str, "\tblue  [%ld]\r\n", controller->ledData[index * 3 + 2]);
        HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
#endif
    }
}
 8001078:	bf00      	nop
 800107a:	3760      	adds	r7, #96	; 0x60
 800107c:	46bd      	mov	sp, r7
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	40490fd0 	.word	0x40490fd0
 8001084:	43340000 	.word	0x43340000

08001088 <WS2812_SetBrightness>:

void WS2812_SetBrightness(WS2812Controller *controller, uint8_t brightness)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
    if (brightness > 45)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b2d      	cmp	r3, #45	; 0x2d
 8001098:	d904      	bls.n	80010a4 <WS2812_SetBrightness+0x1c>
        controller->brightness = 45;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	222d      	movs	r2, #45	; 0x2d
 800109e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    else
        controller->brightness = brightness;
}
 80010a2:	e003      	b.n	80010ac <WS2812_SetBrightness+0x24>
        controller->brightness = brightness;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <WS2812_Update>:

void WS2812_Update(WS2812Controller *controller)
{
 80010b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010bc:	b097      	sub	sp, #92	; 0x5c
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	466b      	mov	r3, sp
 80010c4:	461e      	mov	r6, r3
    // Debug string
    char str[50];

    uint16_t pwmData[(controller->numLeds * 24) + DELAY]; // 222 bits 24 bit/LED
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	899b      	ldrh	r3, [r3, #12]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80010d8:	1e4b      	subs	r3, r1, #1
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
 80010dc:	460a      	mov	r2, r1
 80010de:	2300      	movs	r3, #0
 80010e0:	4690      	mov	r8, r2
 80010e2:	4699      	mov	r9, r3
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80010f0:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80010f4:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80010f8:	460a      	mov	r2, r1
 80010fa:	2300      	movs	r3, #0
 80010fc:	4614      	mov	r4, r2
 80010fe:	461d      	mov	r5, r3
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	012b      	lsls	r3, r5, #4
 800110a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800110e:	0122      	lsls	r2, r4, #4
 8001110:	460b      	mov	r3, r1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	3307      	adds	r3, #7
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	ebad 0d03 	sub.w	sp, sp, r3
 800111e:	466b      	mov	r3, sp
 8001120:	3301      	adds	r3, #1
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
    // Convert RGB data to PWM data
    uint32_t pwmIndex = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t color = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
    uint16_t pulseWith = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	87fb      	strh	r3, [r7, #62]	; 0x3e
    for (uint16_t i = 0; i < (controller->numLeds); i++)
 8001134:	2300      	movs	r3, #0
 8001136:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800113a:	e058      	b.n	80011ee <WS2812_Update+0x136>
    {
        // Extract RGB values
        uint8_t red = controller->ledData[i * 3 + 1];
 800113c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	3301      	adds	r3, #1
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	7b9b      	ldrb	r3, [r3, #14]
 800114e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        uint8_t green = controller->ledData[i * 3];
 8001152:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	7b9b      	ldrb	r3, [r3, #14]
 8001162:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        uint8_t blue = controller->ledData[i * 3 + 2];
 8001166:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	3302      	adds	r3, #2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	7b9b      	ldrb	r3, [r3, #14]
 8001178:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        // Convert RGB data to PWM data
        color = (green << 16) | (red << 8) | (blue << 0);
 800117c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	431a      	orrs	r2, r3
 800118a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800118e:	4313      	orrs	r3, r2
 8001190:	643b      	str	r3, [r7, #64]	; 0x40
        for (uint16_t j = 24; j >= 1; j--)
 8001192:	2318      	movs	r3, #24
 8001194:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001198:	e020      	b.n	80011dc <WS2812_Update+0x124>
        {
            uint16_t pulseWith = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            // calculatePulseWidth(((color >> (j - 1)) & 0x01), &pulseWith);
            if (((color >> (j - 1)) & 0x01))
 80011a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011a4:	3b01      	subs	r3, #1
 80011a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <WS2812_Update+0x104>
                pulseWith = HIGH_BIT; // Adjust based on your timing requirements
 80011b4:	233d      	movs	r3, #61	; 0x3d
 80011b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80011ba:	e002      	b.n	80011c2 <WS2812_Update+0x10a>
            else
                pulseWith = LOW_BIT; // Adjust based on your timing requirements
 80011bc:	231f      	movs	r3, #31
 80011be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            pwmData[pwmIndex++] = pulseWith;
 80011c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	657a      	str	r2, [r7, #84]	; 0x54
 80011c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011ca:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 80011ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint16_t j = 24; j >= 1; j--)
 80011d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80011dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1da      	bne.n	800119a <WS2812_Update+0xe2>
    for (uint16_t i = 0; i < (controller->numLeds); i++)
 80011e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80011e8:	3301      	adds	r3, #1
 80011ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	899b      	ldrh	r3, [r3, #12]
 80011f2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3a0      	bcc.n	800113c <WS2812_Update+0x84>
        }

        // Add 50-bit delay
    }
    for (uint8_t delay = 0; delay < DELAY; delay++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001200:	e00b      	b.n	800121a <WS2812_Update+0x162>
    {
        pwmData[pwmIndex++] = 0;
 8001202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	657a      	str	r2, [r7, #84]	; 0x54
 8001208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800120a:	2100      	movs	r1, #0
 800120c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t delay = 0; delay < DELAY; delay++)
 8001210:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001214:	3301      	adds	r3, #1
 8001216:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800121a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800121e:	2b3b      	cmp	r3, #59	; 0x3b
 8001220:	d9ef      	bls.n	8001202 <WS2812_Update+0x14a>
        sprintf(str, "pwmData[%d] = %d\r\n", i, pwmData[i]);
        HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
    }
#endif

    HAL_StatusTypeDef status = HAL_TIM_PWM_Start_DMA(controller->htim, TIM_CHANNEL_1, (uint32_t *)pwmData, pwmIndex);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001228:	b29b      	uxth	r3, r3
 800122a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800122c:	2100      	movs	r1, #0
 800122e:	f002 ffdd 	bl	80041ec <HAL_TIM_PWM_Start_DMA>
 8001232:	4603      	mov	r3, r0
 8001234:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

    while (status != HAL_OK)
 8001238:	e00d      	b.n	8001256 <WS2812_Update+0x19e>
    {
        // Hier ggf. eine Wartezeit einfügen, um eine Endlosschleife zu verhindern
        HAL_Delay(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f000 ff6e 	bl	800211c <HAL_Delay>
        // Erneut versuchen, DMA zu starten
        status = HAL_TIM_PWM_Start_DMA(controller->htim, TIM_CHANNEL_1, (uint32_t *)pwmData, pwmIndex);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001246:	b29b      	uxth	r3, r3
 8001248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800124a:	2100      	movs	r1, #0
 800124c:	f002 ffce 	bl	80041ec <HAL_TIM_PWM_Start_DMA>
 8001250:	4603      	mov	r3, r0
 8001252:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    while (status != HAL_OK)
 8001256:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1ed      	bne.n	800123a <WS2812_Update+0x182>
 800125e:	46b5      	mov	sp, r6
    }
}
 8001260:	bf00      	nop
 8001262:	375c      	adds	r7, #92	; 0x5c
 8001264:	46bd      	mov	sp, r7
 8001266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800126c <WS2812_Print>:
void WS2812_Deinit(WS2812Controller *controller)
{
}

void WS2812_Print(WS2812Controller *controller)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b099      	sub	sp, #100	; 0x64
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    char str[80];
    sprintf(str, "Channel: %ld\r\n", controller->channel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	493e      	ldr	r1, [pc, #248]	; (8001378 <WS2812_Print+0x10c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fd82 	bl	8005d88 <siprintf>
    HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685c      	ldr	r4, [r3, #4]
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ff9f 	bl	80001d0 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	f107 010c 	add.w	r1, r7, #12
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	4620      	mov	r0, r4
 800129e:	f004 f9b7 	bl	8005610 <HAL_UART_Transmit>
    sprintf(str, "numLeds: %d\r\n", controller->numLeds);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	899b      	ldrh	r3, [r3, #12]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4933      	ldr	r1, [pc, #204]	; (800137c <WS2812_Print+0x110>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 fd6a 	bl	8005d88 <siprintf>
    HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685c      	ldr	r4, [r3, #4]
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f7fe ff87 	bl	80001d0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f107 010c 	add.w	r1, r7, #12
 80012ca:	2364      	movs	r3, #100	; 0x64
 80012cc:	4620      	mov	r0, r4
 80012ce:	f004 f99f 	bl	8005610 <HAL_UART_Transmit>
    sprintf(str, "brightness: %d\r\n", controller->brightness);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012d8:	461a      	mov	r2, r3
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4928      	ldr	r1, [pc, #160]	; (8001380 <WS2812_Print+0x114>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fd51 	bl	8005d88 <siprintf>
    HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685c      	ldr	r4, [r3, #4]
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ff6e 	bl	80001d0 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	f107 010c 	add.w	r1, r7, #12
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	4620      	mov	r0, r4
 8001300:	f004 f986 	bl	8005610 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < controller->numLeds * 3; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800130a:	e01f      	b.n	800134c <WS2812_Print+0xe0>
    {
        sprintf(str, "[%d] ", controller->ledData[i]);
 800130c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	7b9b      	ldrb	r3, [r3, #14]
 8001316:	461a      	mov	r2, r3
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4919      	ldr	r1, [pc, #100]	; (8001384 <WS2812_Print+0x118>)
 800131e:	4618      	mov	r0, r3
 8001320:	f004 fd32 	bl	8005d88 <siprintf>
        HAL_UART_Transmit(controller->huart, (uint8_t *)str, strlen(str), 100);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685c      	ldr	r4, [r3, #4]
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff4f 	bl	80001d0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f107 010c 	add.w	r1, r7, #12
 800133a:	2364      	movs	r3, #100	; 0x64
 800133c:	4620      	mov	r0, r4
 800133e:	f004 f967 	bl	8005610 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < controller->numLeds * 3; i++)
 8001342:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001346:	3301      	adds	r3, #1
 8001348:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800134c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	899b      	ldrh	r3, [r3, #12]
 8001354:	4619      	mov	r1, r3
 8001356:	460b      	mov	r3, r1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	440b      	add	r3, r1
 800135c:	429a      	cmp	r2, r3
 800135e:	dbd5      	blt.n	800130c <WS2812_Print+0xa0>
    }
    HAL_UART_Transmit(controller->huart, "\r\n", strlen("\r\n"), 100);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6858      	ldr	r0, [r3, #4]
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	2202      	movs	r2, #2
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <WS2812_Print+0x11c>)
 800136a:	f004 f951 	bl	8005610 <HAL_UART_Transmit>
}
 800136e:	bf00      	nop
 8001370:	3764      	adds	r7, #100	; 0x64
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	0800784c 	.word	0x0800784c
 800137c:	0800785c 	.word	0x0800785c
 8001380:	0800786c 	.word	0x0800786c
 8001384:	08007880 	.word	0x08007880
 8001388:	08007888 	.word	0x08007888

0800138c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b0ac      	sub	sp, #176	; 0xb0
 8001390:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t status = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint8_t led = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint8_t randColor = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
  uint32_t color = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint8_t red = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
  uint8_t green = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
  uint8_t blue = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
  uint32_t brightness = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  char tx_begin[] = "/* ========== main begin  ========== */\r\n";
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <main+0x224>)
 80013c4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80013c8:	461d      	mov	r5, r3
 80013ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d6:	c403      	stmia	r4!, {r0, r1}
 80013d8:	8022      	strh	r2, [r4, #0]
  char tx_buffer[50];
  WS2812Controller ws2812Controller;
  HAL_UART_Transmit(&huart3, (uint8_t *)tx_begin, strlen(tx_begin), 100);
 80013da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013de:	4618      	mov	r0, r3
 80013e0:	f7fe fef6 	bl	80001d0 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	4871      	ldr	r0, [pc, #452]	; (80015b4 <main+0x228>)
 80013f0:	f004 f90e 	bl	8005610 <HAL_UART_Transmit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f000 fe20 	bl	8002038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f8f4 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f000 faae 	bl	800195c <MX_GPIO_Init>
  MX_DMA_Init();
 8001400:	f000 fa84 	bl	800190c <MX_DMA_Init>
  MX_TIM3_Init();
 8001404:	f000 f9be 	bl	8001784 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001408:	f000 fa56 	bl	80018b8 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 800140c:	f000 fa30 	bl	8001870 <MX_TIM14_Init>
  MX_RNG_Init();
 8001410:	f000 f9a4 	bl	800175c <MX_RNG_Init>
  MX_ADC1_Init();
 8001414:	f000 f950 	bl	80016b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  WS2812_Init(&ws2812Controller, &htim3, &huart3, TIM_CHANNEL_1, NUM_LEDS);
 8001418:	4638      	mov	r0, r7
 800141a:	230c      	movs	r3, #12
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	4a64      	ldr	r2, [pc, #400]	; (80015b4 <main+0x228>)
 8001422:	4965      	ldr	r1, [pc, #404]	; (80015b8 <main+0x22c>)
 8001424:	f7ff fd48 	bl	8000eb8 <WS2812_Init>
  WS2812_SetBrightness(&ws2812Controller, 5);
 8001428:	463b      	mov	r3, r7
 800142a:	2105      	movs	r1, #5
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe2b 	bl	8001088 <WS2812_SetBrightness>
  sprintf(tx_buffer, "========== ws2812 SetBrightness==========\r\n");
 8001432:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001436:	4961      	ldr	r1, [pc, #388]	; (80015bc <main+0x230>)
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fca5 	bl	8005d88 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)tx_buffer, strlen(tx_buffer), 100);
 800143e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fec4 	bl	80001d0 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001450:	2364      	movs	r3, #100	; 0x64
 8001452:	4858      	ldr	r0, [pc, #352]	; (80015b4 <main+0x228>)
 8001454:	f004 f8dc 	bl	8005610 <HAL_UART_Transmit>
  // WS2812_Reset(&ws2812Controller);
  WS2812_Print(&ws2812Controller);
 8001458:	463b      	mov	r3, r7
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff06 	bl	800126c <WS2812_Print>
  sprintf(tx_buffer, "========== ws2812 reset==========\r\n");
 8001460:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001464:	4956      	ldr	r1, [pc, #344]	; (80015c0 <main+0x234>)
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fc8e 	bl	8005d88 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)tx_buffer, strlen(tx_buffer), 100);
 800146c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe fead 	bl	80001d0 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	484c      	ldr	r0, [pc, #304]	; (80015b4 <main+0x228>)
 8001482:	f004 f8c5 	bl	8005610 <HAL_UART_Transmit>

  HAL_TIM_Base_Start_IT(&htim14);
 8001486:	484f      	ldr	r0, [pc, #316]	; (80015c4 <main+0x238>)
 8001488:	f002 fde6 	bl	8004058 <HAL_TIM_Base_Start_IT>
  HAL_RNG_GenerateRandomNumber_IT(&hrng);
 800148c:	484e      	ldr	r0, [pc, #312]	; (80015c8 <main+0x23c>)
 800148e:	f002 fcfb 	bl	8003e88 <HAL_RNG_GenerateRandomNumber_IT>
  // HAL_ADC_Start_IT(&hadc1);

  sprintf(tx_buffer, "========== ws2812 update==========\r\n");
 8001492:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001496:	494d      	ldr	r1, [pc, #308]	; (80015cc <main+0x240>)
 8001498:	4618      	mov	r0, r3
 800149a:	f004 fc75 	bl	8005d88 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)tx_buffer, strlen(tx_buffer), 100);
 800149e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fe94 	bl	80001d0 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	4840      	ldr	r0, [pc, #256]	; (80015b4 <main+0x228>)
 80014b4:	f004 f8ac 	bl	8005610 <HAL_UART_Transmit>

  while (1)
  {

    if (Trigger == TRUE)
 80014b8:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <main+0x244>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d1fb      	bne.n	80014b8 <main+0x12c>
    {
      if (RNGFlag == TRUE)
 80014c0:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <main+0x248>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d108      	bne.n	80014da <main+0x14e>
      {
        RNGFlag = FALSE;
 80014c8:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <main+0x248>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
        color = HAL_RNG_ReadLastRandomNumber(&hrng);
 80014ce:	483e      	ldr	r0, [pc, #248]	; (80015c8 <main+0x23c>)
 80014d0:	f002 fd5d 	bl	8003f8e <HAL_RNG_ReadLastRandomNumber>
 80014d4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80014d8:	e002      	b.n	80014e0 <main+0x154>
      }
      else
        color = 0xc483c3;
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <main+0x24c>)
 80014dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      red = (color >> 16) & 0xFF;
 80014e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014e4:	0c1b      	lsrs	r3, r3, #16
 80014e6:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
      green = (color >> 8) & 0xFF;
 80014ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
      blue = (color >> 0) & 0xFF;
 80014f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014f8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
      WS2812_SetColor(&ws2812Controller, led, red, green, blue);
 80014fc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001500:	b299      	uxth	r1, r3
 8001502:	f897 409c 	ldrb.w	r4, [r7, #156]	; 0x9c
 8001506:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800150a:	4638      	mov	r0, r7
 800150c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4623      	mov	r3, r4
 8001514:	f7ff fd12 	bl	8000f3c <WS2812_SetColor>
      WS2812_Update(&ws2812Controller);
 8001518:	463b      	mov	r3, r7
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fdcc 	bl	80010b8 <WS2812_Update>
      (led < ws2812Controller.numLeds) ? led++ : 0;
 8001520:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001524:	b29a      	uxth	r2, r3
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d204      	bcs.n	8001536 <main+0x1aa>
 800152c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001530:	3301      	adds	r3, #1
 8001532:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
      sprintf(tx_buffer, "========== ws2812 adc: %ld==========\r\n", adcValue);
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <main+0x250>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800153e:	4928      	ldr	r1, [pc, #160]	; (80015e0 <main+0x254>)
 8001540:	4618      	mov	r0, r3
 8001542:	f004 fc21 	bl	8005d88 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)tx_buffer, strlen(tx_buffer), 100);
 8001546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe fe40 	bl	80001d0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001558:	2364      	movs	r3, #100	; 0x64
 800155a:	4816      	ldr	r0, [pc, #88]	; (80015b4 <main+0x228>)
 800155c:	f004 f858 	bl	8005610 <HAL_UART_Transmit>
      brightness = adcValue * 45 / 4096;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <main+0x250>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	011a      	lsls	r2, r3, #4
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	0b1b      	lsrs	r3, r3, #12
 8001570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      ws2812Controller.brightness = brightness;
 8001574:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      sprintf(tx_buffer, "========== ws2812 adc: %ld==========\r\n", brightness);
 800157e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001586:	4916      	ldr	r1, [pc, #88]	; (80015e0 <main+0x254>)
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fbfd 	bl	8005d88 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)tx_buffer, strlen(tx_buffer), 100);
 800158e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fe1c 	bl	80001d0 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <main+0x228>)
 80015a4:	f004 f834 	bl	8005610 <HAL_UART_Transmit>
      // HAL_ADC_Start_IT(&hadc1);

      Trigger = FALSE;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <main+0x244>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
    if (Trigger == TRUE)
 80015ae:	e783      	b.n	80014b8 <main+0x12c>
 80015b0:	0800792c 	.word	0x0800792c
 80015b4:	200001c0 	.word	0x200001c0
 80015b8:	200000d0 	.word	0x200000d0
 80015bc:	0800788c 	.word	0x0800788c
 80015c0:	080078b8 	.word	0x080078b8
 80015c4:	20000118 	.word	0x20000118
 80015c8:	200000c0 	.word	0x200000c0
 80015cc:	080078dc 	.word	0x080078dc
 80015d0:	20000269 	.word	0x20000269
 80015d4:	2000026a 	.word	0x2000026a
 80015d8:	00c483c3 	.word	0x00c483c3
 80015dc:	2000026c 	.word	0x2000026c
 80015e0:	08007904 	.word	0x08007904

080015e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	; 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	; 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fbe8 	bl	8005dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <SystemClock_Config+0xcc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <SystemClock_Config+0xcc>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <SystemClock_Config+0xcc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <SystemClock_Config+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <SystemClock_Config+0xd0>)
 800162e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <SystemClock_Config+0xd0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164a:	2302      	movs	r3, #2
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001654:	2306      	movs	r3, #6
 8001656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001658:	2348      	movs	r3, #72	; 0x48
 800165a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001660:	2307      	movs	r3, #7
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	4618      	mov	r0, r3
 800166a:	f001 ff8b 	bl	8003584 <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001674:	f000 fa32 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001678:	230f      	movs	r3, #15
 800167a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2302      	movs	r3, #2
 800167e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2102      	movs	r1, #2
 8001696:	4618      	mov	r0, r3
 8001698:	f002 f9ec 	bl	8003a74 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016a2:	f000 fa1b 	bl	8001adc <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3750      	adds	r7, #80	; 0x50
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000

080016b8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_ADC1_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_ADC1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_ADC1_Init+0xa0>)
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_ADC1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_ADC1_Init+0x98>)
 8001704:	2201      	movs	r2, #1
 8001706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_ADC1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_ADC1_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_ADC1_Init+0x98>)
 8001718:	f000 fd24 	bl	8002164 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001722:	f000 f9db 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_15;
 8001726:	230f      	movs	r3, #15
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_ADC1_Init+0x98>)
 8001738:	f000 fe88 	bl	800244c <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001742:	f000 f9cb 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000078 	.word	0x20000078
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_RNG_Init+0x20>)
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <MX_RNG_Init+0x24>)
 8001764:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_RNG_Init+0x20>)
 8001768:	f002 fb64 	bl	8003e34 <HAL_RNG_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001772:	f000 f9b3 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000c0 	.word	0x200000c0
 8001780:	50060800 	.word	0x50060800

08001784 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017b6:	4a2d      	ldr	r2, [pc, #180]	; (800186c <MX_TIM3_Init+0xe8>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99 - 1;
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017c8:	2262      	movs	r2, #98	; 0x62
 80017ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d8:	4823      	ldr	r0, [pc, #140]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017da:	f002 fbee 	bl	8003fba <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80017e4:	f000 f97a 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f2:	4619      	mov	r1, r3
 80017f4:	481c      	ldr	r0, [pc, #112]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017f6:	f003 f945 	bl	8004a84 <HAL_TIM_ConfigClockSource>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001800:	f000 f96c 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001804:	4818      	ldr	r0, [pc, #96]	; (8001868 <MX_TIM3_Init+0xe4>)
 8001806:	f002 fc97 	bl	8004138 <HAL_TIM_PWM_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001810:	f000 f964 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800181c:	f107 0320 	add.w	r3, r7, #32
 8001820:	4619      	mov	r1, r3
 8001822:	4811      	ldr	r0, [pc, #68]	; (8001868 <MX_TIM3_Init+0xe4>)
 8001824:	f003 fe14 	bl	8005450 <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800182e:	f000 f955 	bl	8001adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001832:	2360      	movs	r3, #96	; 0x60
 8001834:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8001836:	2302      	movs	r3, #2
 8001838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_TIM3_Init+0xe4>)
 800184a:	f003 f859 	bl	8004900 <HAL_TIM_PWM_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001854:	f000 f942 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <MX_TIM3_Init+0xe4>)
 800185a:	f000 fa61 	bl	8001d20 <HAL_TIM_MspPostInit>
}
 800185e:	bf00      	nop
 8001860:	3738      	adds	r7, #56	; 0x38
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200000d0 	.word	0x200000d0
 800186c:	40000400 	.word	0x40000400

08001870 <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_TIM14_Init+0x40>)
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <MX_TIM14_Init+0x44>)
 8001878:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000 - 1;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <MX_TIM14_Init+0x40>)
 800187c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001880:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_TIM14_Init+0x40>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_TIM14_Init+0x40>)
 800188a:	f242 720f 	movw	r2, #9999	; 0x270f
 800188e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_TIM14_Init+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_TIM14_Init+0x40>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_TIM14_Init+0x40>)
 800189e:	f002 fb8c 	bl	8003fba <HAL_TIM_Base_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80018a8:	f000 f918 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000118 	.word	0x20000118
 80018b4:	40002000 	.word	0x40002000

080018b8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <MX_USART3_UART_Init+0x50>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_USART3_UART_Init+0x4c>)
 80018f0:	f003 fe3e 	bl	8005570 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018fa:	f000 f8ef 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200001c0 	.word	0x200001c0
 8001908:	40004800 	.word	0x40004800

0800190c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <MX_DMA_Init+0x4c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <MX_DMA_Init+0x4c>)
 800191c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <MX_DMA_Init+0x4c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	200c      	movs	r0, #12
 8001934:	f001 f88d 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001938:	200c      	movs	r0, #12
 800193a:	f001 f8a6 	bl	8002a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	200f      	movs	r0, #15
 8001944:	f001 f885 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001948:	200f      	movs	r0, #15
 800194a:	f001 f89e 	bl	8002a8a <HAL_NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <MX_GPIO_Init+0xb4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a25      	ldr	r2, [pc, #148]	; (8001a10 <MX_GPIO_Init+0xb4>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <MX_GPIO_Init+0xb4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_GPIO_Init+0xb4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <MX_GPIO_Init+0xb4>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_GPIO_Init+0xb4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_GPIO_Init+0xb4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <MX_GPIO_Init+0xb4>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_GPIO_Init+0xb4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_GPIO_Init+0xb4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <MX_GPIO_Init+0xb4>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_GPIO_Init+0xb4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NEO_PIXEL_Pin | USER_LED_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2103      	movs	r1, #3
 80019e6:	480b      	ldr	r0, [pc, #44]	; (8001a14 <MX_GPIO_Init+0xb8>)
 80019e8:	f001 fd98 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NEO_PIXEL_Pin USER_LED_Pin */
  GPIO_InitStruct.Pin = NEO_PIXEL_Pin | USER_LED_Pin;
 80019ec:	2303      	movs	r3, #3
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_GPIO_Init+0xb8>)
 8001a04:	f001 fbee 	bl	80031e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	; 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020800 	.word	0x40020800

08001a18 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d106      	bne.n	8001a38 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
  {
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8001a2e:	f002 fda5 	bl	800457c <HAL_TIM_PWM_Stop_DMA>
    DMA_FINISH = TRUE;
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40000400 	.word	0x40000400
 8001a44:	200000d0 	.word	0x200000d0
 8001a48:	20000268 	.word	0x20000268

08001a4c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM14)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d109      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    HAL_RNG_GenerateRandomNumber_IT(&hrng);
 8001a5e:	4808      	ldr	r0, [pc, #32]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a60:	f002 fa12 	bl	8003e88 <HAL_RNG_GenerateRandomNumber_IT>
    Trigger = TRUE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOC, USER_LED_Pin);
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a6e:	f001 fd6e 	bl	800354e <HAL_GPIO_TogglePin>
  }
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40002000 	.word	0x40002000
 8001a80:	200000c0 	.word	0x200000c0
 8001a84:	20000269 	.word	0x20000269
 8001a88:	40020800 	.word	0x40020800

08001a8c <HAL_RNG_ReadyDataCallback>:

void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
  RNGFlag = TRUE;
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_RNG_ReadyDataCallback+0x1c>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	2000026a 	.word	0x2000026a

08001aac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_ADC_ConvCpltCallback+0x28>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d106      	bne.n	8001acc <HAL_ADC_ConvCpltCallback+0x20>
  {
    adcValue = HAL_ADC_GetValue(&hadc);
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fca2 	bl	800240a <HAL_ADC_GetValue>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001aca:	6013      	str	r3, [r2, #0]
  }
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40012000 	.word	0x40012000
 8001ad8:	2000026c 	.word	0x2000026c

08001adc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <Error_Handler+0x8>
	...

08001ae8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <HAL_MspInit+0x4c>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <HAL_ADC_MspInit+0x8c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d12f      	bne.n	8001bba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_ADC_MspInit+0x90>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_ADC_MspInit+0x90>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_ADC_MspInit+0x90>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_ADC_MspInit+0x90>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_ADC_MspInit+0x90>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_ADC_MspInit+0x90>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b92:	2320      	movs	r3, #32
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b96:	2303      	movs	r3, #3
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4809      	ldr	r0, [pc, #36]	; (8001bcc <HAL_ADC_MspInit+0x94>)
 8001ba6:	f001 fb1d 	bl	80031e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	2012      	movs	r0, #18
 8001bb0:	f000 ff4f 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bb4:	2012      	movs	r0, #18
 8001bb6:	f000 ff68 	bl	8002a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40012000 	.word	0x40012000
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020800 	.word	0x40020800

08001bd0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_RNG_MspInit+0x48>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d115      	bne.n	8001c0e <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_RNG_MspInit+0x4c>)
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_RNG_MspInit+0x4c>)
 8001bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf0:	6353      	str	r3, [r2, #52]	; 0x34
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RNG_MspInit+0x4c>)
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2050      	movs	r0, #80	; 0x50
 8001c04:	f000 ff25 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001c08:	2050      	movs	r0, #80	; 0x50
 8001c0a:	f000 ff3e 	bl	8002a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	50060800 	.word	0x50060800
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a37      	ldr	r2, [pc, #220]	; (8001d0c <HAL_TIM_Base_MspInit+0xec>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d14c      	bne.n	8001ccc <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <HAL_TIM_Base_MspInit+0xf0>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a35      	ldr	r2, [pc, #212]	; (8001d10 <HAL_TIM_Base_MspInit+0xf0>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_TIM_Base_MspInit+0xf0>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c50:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <HAL_TIM_Base_MspInit+0xf8>)
 8001c52:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c56:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001c5a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c76:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001c92:	4820      	ldr	r0, [pc, #128]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001c94:	f000 ff14 	bl	8002ac0 <HAL_DMA_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001c9e:	f7ff ff1d 	bl	8001adc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	201d      	movs	r0, #29
 8001cc0:	f000 fec7 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc4:	201d      	movs	r0, #29
 8001cc6:	f000 fee0 	bl	8002a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001cca:	e01a      	b.n	8001d02 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM14)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_TIM_Base_MspInit+0xfc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d115      	bne.n	8001d02 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_TIM_Base_MspInit+0xf0>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_TIM_Base_MspInit+0xf0>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_TIM_Base_MspInit+0xf0>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	202d      	movs	r0, #45	; 0x2d
 8001cf8:	f000 feab 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001cfc:	202d      	movs	r0, #45	; 0x2d
 8001cfe:	f000 fec4 	bl	8002a8a <HAL_NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	20000160 	.word	0x20000160
 8001d18:	40026070 	.word	0x40026070
 8001d1c:	40002000 	.word	0x40002000

08001d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_TIM_MspPostInit+0x68>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d11d      	bne.n	8001d7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_TIM_MspPostInit+0x6c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_TIM_MspPostInit+0x6c>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_TIM_MspPostInit+0x6c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d5e:	2340      	movs	r3, #64	; 0x40
 8001d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <HAL_TIM_MspPostInit+0x70>)
 8001d7a:	f001 fa33 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a30      	ldr	r2, [pc, #192]	; (8001e74 <HAL_UART_MspInit+0xe0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d15a      	bne.n	8001e6c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_UART_MspInit+0xe4>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a2e      	ldr	r2, [pc, #184]	; (8001e78 <HAL_UART_MspInit+0xe4>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <HAL_UART_MspInit+0xe4>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_UART_MspInit+0xe4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_UART_MspInit+0xe4>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_UART_MspInit+0xe4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e00:	2307      	movs	r3, #7
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	481c      	ldr	r0, [pc, #112]	; (8001e7c <HAL_UART_MspInit+0xe8>)
 8001e0c:	f001 f9ea 	bl	80031e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <HAL_UART_MspInit+0xf0>)
 8001e14:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e1c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e30:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e50:	480b      	ldr	r0, [pc, #44]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e52:	f000 fe35 	bl	8002ac0 <HAL_DMA_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e5c:	f7ff fe3e 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40004800 	.word	0x40004800
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	20000208 	.word	0x20000208
 8001e84:	40026028 	.word	0x40026028

08001e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e8c:	e7fe      	b.n	8001e8c <NMI_Handler+0x4>

08001e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <HardFault_Handler+0x4>

08001e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler+0x4>

08001e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <BusFault_Handler+0x4>

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <UsageFault_Handler+0x4>

08001ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed4:	f000 f902 	bl	80020dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <DMA1_Stream1_IRQHandler+0x10>)
 8001ee2:	f000 ff15 	bl	8002d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000208 	.word	0x20000208

08001ef0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <DMA1_Stream4_IRQHandler+0x10>)
 8001ef6:	f000 ff0b 	bl	8002d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000160 	.word	0x20000160

08001f04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <ADC_IRQHandler+0x10>)
 8001f0a:	f000 f96e 	bl	80021ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000078 	.word	0x20000078

08001f18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <TIM3_IRQHandler+0x10>)
 8001f1e:	f002 fbff 	bl	8004720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200000d0 	.word	0x200000d0

08001f2c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001f32:	f002 fbf5 	bl	8004720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000118 	.word	0x20000118

08001f40 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <HASH_RNG_IRQHandler+0x10>)
 8001f46:	f001 ffce 	bl	8003ee6 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200000c0 	.word	0x200000c0

08001f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <_sbrk+0x5c>)
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <_sbrk+0x60>)
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <_sbrk+0x64>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <_sbrk+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f84:	f003 ff28 	bl	8005dd8 <__errno>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20020000 	.word	0x20020000
 8001fb4:	00000400 	.word	0x00000400
 8001fb8:	20000270 	.word	0x20000270
 8001fbc:	200003c0 	.word	0x200003c0

08001fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <SystemInit+0x20>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <SystemInit+0x20>)
 8001fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800201c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fe8:	f7ff ffea 	bl	8001fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fee:	490d      	ldr	r1, [pc, #52]	; (8002024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002004:	4c0a      	ldr	r4, [pc, #40]	; (8002030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002012:	f003 fee7 	bl	8005de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002016:	f7ff f9b9 	bl	800138c <main>
  bx  lr    
 800201a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800201c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002024:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002028:	08007b98 	.word	0x08007b98
  ldr r2, =_sbss
 800202c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002030:	200003c0 	.word	0x200003c0

08002034 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002034:	e7fe      	b.n	8002034 <CAN1_RX0_IRQHandler>
	...

08002038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_Init+0x40>)
 8002042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_Init+0x40>)
 800204e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_Init+0x40>)
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 fceb 	bl	8002a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002066:	200f      	movs	r0, #15
 8002068:	f000 f808 	bl	800207c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206c:	f7ff fd3c 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023c00 	.word	0x40023c00

0800207c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x54>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0x58>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	fbb3 f3f1 	udiv	r3, r3, r1
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fd03 	bl	8002aa6 <HAL_SYSTICK_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00e      	b.n	80020c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	d80a      	bhi.n	80020c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b0:	2200      	movs	r2, #0
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	f000 fccb 	bl	8002a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020bc:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <HAL_InitTick+0x5c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000004 	.word	0x20000004

080020dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_IncTick+0x20>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_IncTick+0x24>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_IncTick+0x24>)
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000008 	.word	0x20000008
 8002100:	20000274 	.word	0x20000274

08002104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return uwTick;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_GetTick+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000274 	.word	0x20000274

0800211c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002124:	f7ff ffee 	bl	8002104 <HAL_GetTick>
 8002128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d005      	beq.n	8002142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_Delay+0x44>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002142:	bf00      	nop
 8002144:	f7ff ffde 	bl	8002104 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d8f7      	bhi.n	8002144 <HAL_Delay+0x28>
  {
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000008 	.word	0x20000008

08002164 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e033      	b.n	80021e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fcd8 	bl	8001b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021aa:	f023 0302 	bic.w	r3, r3, #2
 80021ae:	f043 0202 	orr.w	r2, r3, #2
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fa6a 	bl	8002690 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
 80021d2:	e001      	b.n	80021d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d049      	beq.n	80022b4 <HAL_ADC_IRQHandler+0xca>
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d046      	beq.n	80022b4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d12b      	bne.n	80022a4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002250:	2b00      	cmp	r3, #0
 8002252:	d127      	bne.n	80022a4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800226c:	2b00      	cmp	r3, #0
 800226e:	d119      	bne.n	80022a4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0220 	bic.w	r2, r2, #32
 800227e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fc01 	bl	8001aac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f06f 0212 	mvn.w	r2, #18
 80022b2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d057      	beq.n	800237a <HAL_ADC_IRQHandler+0x190>
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d054      	beq.n	800237a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d139      	bne.n	800236a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d12b      	bne.n	800236a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	d124      	bne.n	800236a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d11d      	bne.n	800236a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002344:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa8c 	bl	8002888 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 020c 	mvn.w	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x1d6>
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d014      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10d      	bne.n	80023c0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f837 	bl	8002424 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0201 	mvn.w	r2, #1
 80023be:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ce:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d015      	beq.n	8002402 <HAL_ADC_IRQHandler+0x218>
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d012      	beq.n	8002402 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	f043 0202 	orr.w	r2, r3, #2
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0220 	mvn.w	r2, #32
 80023f0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f820 	bl	8002438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0220 	mvn.w	r2, #32
 8002400:	601a      	str	r2, [r3, #0]
  }
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1c>
 8002464:	2302      	movs	r3, #2
 8002466:	e105      	b.n	8002674 <HAL_ADC_ConfigChannel+0x228>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b09      	cmp	r3, #9
 8002476:	d925      	bls.n	80024c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68d9      	ldr	r1, [r3, #12]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	3b1e      	subs	r3, #30
 800248e:	2207      	movs	r2, #7
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43da      	mvns	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	400a      	ands	r2, r1
 800249c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68d9      	ldr	r1, [r3, #12]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	4603      	mov	r3, r0
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4403      	add	r3, r0
 80024b6:	3b1e      	subs	r3, #30
 80024b8:	409a      	lsls	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	e022      	b.n	800250a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6919      	ldr	r1, [r3, #16]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	2207      	movs	r2, #7
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	400a      	ands	r2, r1
 80024e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6919      	ldr	r1, [r3, #16]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4403      	add	r3, r0
 8002500:	409a      	lsls	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b06      	cmp	r3, #6
 8002510:	d824      	bhi.n	800255c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	3b05      	subs	r3, #5
 8002524:	221f      	movs	r2, #31
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	400a      	ands	r2, r1
 8002532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b05      	subs	r3, #5
 800254e:	fa00 f203 	lsl.w	r2, r0, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
 800255a:	e04c      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	d824      	bhi.n	80025ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	3b23      	subs	r3, #35	; 0x23
 8002576:	221f      	movs	r2, #31
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43da      	mvns	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	400a      	ands	r2, r1
 8002584:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	4618      	mov	r0, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	3b23      	subs	r3, #35	; 0x23
 80025a0:	fa00 f203 	lsl.w	r2, r0, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
 80025ac:	e023      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	3b41      	subs	r3, #65	; 0x41
 80025c0:	221f      	movs	r2, #31
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	400a      	ands	r2, r1
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4618      	mov	r0, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	3b41      	subs	r3, #65	; 0x41
 80025ea:	fa00 f203 	lsl.w	r2, r0, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_ADC_ConfigChannel+0x234>)
 80025f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	; (8002684 <HAL_ADC_ConfigChannel+0x238>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d109      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x1cc>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b12      	cmp	r3, #18
 800260a:	d105      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_ADC_ConfigChannel+0x238>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d123      	bne.n	800266a <HAL_ADC_ConfigChannel+0x21e>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b10      	cmp	r3, #16
 8002628:	d003      	beq.n	8002632 <HAL_ADC_ConfigChannel+0x1e6>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b11      	cmp	r3, #17
 8002630:	d11b      	bne.n	800266a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d111      	bne.n	800266a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_ADC_ConfigChannel+0x23c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a10      	ldr	r2, [pc, #64]	; (800268c <HAL_ADC_ConfigChannel+0x240>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	0c9a      	lsrs	r2, r3, #18
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800265c:	e002      	b.n	8002664 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	3b01      	subs	r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f9      	bne.n	800265e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40012300 	.word	0x40012300
 8002684:	40012000 	.word	0x40012000
 8002688:	20000000 	.word	0x20000000
 800268c:	431bde83 	.word	0x431bde83

08002690 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002698:	4b79      	ldr	r3, [pc, #484]	; (8002880 <ADC_Init+0x1f0>)
 800269a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	021a      	lsls	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	4a58      	ldr	r2, [pc, #352]	; (8002884 <ADC_Init+0x1f4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d022      	beq.n	800276e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002736:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	e00f      	b.n	800278e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800277c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800278c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0202 	bic.w	r2, r2, #2
 800279c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7e1b      	ldrb	r3, [r3, #24]
 80027a8:	005a      	lsls	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	3b01      	subs	r3, #1
 80027e8:	035a      	lsls	r2, r3, #13
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	e007      	b.n	8002804 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	3b01      	subs	r3, #1
 8002820:	051a      	lsls	r2, r3, #20
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6899      	ldr	r1, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002846:	025a      	lsls	r2, r3, #9
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6899      	ldr	r1, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	029a      	lsls	r2, r3, #10
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40012300 	.word	0x40012300
 8002884:	0f000001 	.word	0x0f000001

08002888 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b8:	4013      	ands	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60d3      	str	r3, [r2, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <__NVIC_GetPriorityGrouping+0x18>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 0307 	and.w	r3, r3, #7
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	2b00      	cmp	r3, #0
 8002910:	db0b      	blt.n	800292a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	4907      	ldr	r1, [pc, #28]	; (8002938 <__NVIC_EnableIRQ+0x38>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	2001      	movs	r0, #1
 8002922:	fa00 f202 	lsl.w	r2, r0, r2
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000e100 	.word	0xe000e100

0800293c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	6039      	str	r1, [r7, #0]
 8002946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	2b00      	cmp	r3, #0
 800294e:	db0a      	blt.n	8002966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	b2da      	uxtb	r2, r3
 8002954:	490c      	ldr	r1, [pc, #48]	; (8002988 <__NVIC_SetPriority+0x4c>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	0112      	lsls	r2, r2, #4
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	440b      	add	r3, r1
 8002960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002964:	e00a      	b.n	800297c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4908      	ldr	r1, [pc, #32]	; (800298c <__NVIC_SetPriority+0x50>)
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	3b04      	subs	r3, #4
 8002974:	0112      	lsls	r2, r2, #4
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	440b      	add	r3, r1
 800297a:	761a      	strb	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000e100 	.word	0xe000e100
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f1c3 0307 	rsb	r3, r3, #7
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	bf28      	it	cs
 80029ae:	2304      	movcs	r3, #4
 80029b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2b06      	cmp	r3, #6
 80029b8:	d902      	bls.n	80029c0 <NVIC_EncodePriority+0x30>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3b03      	subs	r3, #3
 80029be:	e000      	b.n	80029c2 <NVIC_EncodePriority+0x32>
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	401a      	ands	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d8:	f04f 31ff 	mov.w	r1, #4294967295
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43d9      	mvns	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	4313      	orrs	r3, r2
         );
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a08:	d301      	bcc.n	8002a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00f      	b.n	8002a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <SysTick_Config+0x40>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a16:	210f      	movs	r1, #15
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f7ff ff8e 	bl	800293c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <SysTick_Config+0x40>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <SysTick_Config+0x40>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	e000e010 	.word	0xe000e010

08002a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff29 	bl	800289c <__NVIC_SetPriorityGrouping>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a64:	f7ff ff3e 	bl	80028e4 <__NVIC_GetPriorityGrouping>
 8002a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	6978      	ldr	r0, [r7, #20]
 8002a70:	f7ff ff8e 	bl	8002990 <NVIC_EncodePriority>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff5d 	bl	800293c <__NVIC_SetPriority>
}
 8002a82:	bf00      	nop
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff31 	bl	8002900 <__NVIC_EnableIRQ>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ffa2 	bl	80029f8 <SysTick_Config>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff fb1a 	bl	8002104 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e099      	b.n	8002c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afc:	e00f      	b.n	8002b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afe:	f7ff fb01 	bl	8002104 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d908      	bls.n	8002b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e078      	b.n	8002c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e8      	bne.n	8002afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_DMA_Init+0x158>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d107      	bne.n	8002b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4313      	orrs	r3, r2
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f023 0307 	bic.w	r3, r3, #7
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d117      	bne.n	8002be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fa91 	bl	80030ec <DMA_CheckFifoParam>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2240      	movs	r2, #64	; 0x40
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bde:	2301      	movs	r3, #1
 8002be0:	e016      	b.n	8002c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa48 	bl	8003080 <DMA_CalcBaseAndBitshift>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	223f      	movs	r2, #63	; 0x3f
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	f010803f 	.word	0xf010803f

08002c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Start_IT+0x26>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e040      	b.n	8002cc4 <HAL_DMA_Start_IT+0xa8>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d12f      	bne.n	8002cb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f9da 	bl	8003024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	223f      	movs	r2, #63	; 0x3f
 8002c76:	409a      	lsls	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0216 	orr.w	r2, r2, #22
 8002c8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e005      	b.n	8002cc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d004      	beq.n	8002cea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00c      	b.n	8002d04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2205      	movs	r2, #5
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d1c:	4b8e      	ldr	r3, [pc, #568]	; (8002f58 <HAL_DMA_IRQHandler+0x248>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a8e      	ldr	r2, [pc, #568]	; (8002f5c <HAL_DMA_IRQHandler+0x24c>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a9b      	lsrs	r3, r3, #10
 8002d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01a      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	2208      	movs	r2, #8
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	2201      	movs	r2, #1
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d012      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	2201      	movs	r2, #1
 8002da0:	409a      	lsls	r2, r3
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f043 0202 	orr.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2204      	movs	r2, #4
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2210      	movs	r2, #16
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d043      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03c      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d018      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d024      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
 8002e3e:	e01f      	b.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
 8002e50:	e016      	b.n	8002e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d107      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0208 	bic.w	r2, r2, #8
 8002e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	2220      	movs	r2, #32
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 808f 	beq.w	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8087 	beq.w	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d136      	bne.n	8002f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0216 	bic.w	r2, r2, #22
 8002ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_DMA_IRQHandler+0x1da>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0208 	bic.w	r2, r2, #8
 8002ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	223f      	movs	r2, #63	; 0x3f
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d07e      	beq.n	800301c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
        }
        return;
 8002f26:	e079      	b.n	800301c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10d      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d031      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
 8002f54:	e02c      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
 8002f56:	bf00      	nop
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d023      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	e01e      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10f      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0210 	bic.w	r2, r2, #16
 8002f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d032      	beq.n	800301e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d022      	beq.n	800300a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2205      	movs	r2, #5
 8002fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d307      	bcc.n	8002ff8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f2      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x2cc>
 8002ff6:	e000      	b.n	8002ffa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ff8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
 800301a:	e000      	b.n	800301e <HAL_DMA_IRQHandler+0x30e>
        return;
 800301c:	bf00      	nop
    }
  }
}
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d108      	bne.n	8003064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003062:	e007      	b.n	8003074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	3b10      	subs	r3, #16
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800309a:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <DMA_CalcBaseAndBitshift+0x68>)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d909      	bls.n	80030c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	1d1a      	adds	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	; 0x58
 80030c0:	e007      	b.n	80030d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	aaaaaaab 	.word	0xaaaaaaab
 80030e8:	08007970 	.word	0x08007970

080030ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11f      	bne.n	8003146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d856      	bhi.n	80031ba <DMA_CheckFifoParam+0xce>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <DMA_CheckFifoParam+0x28>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	08003137 	.word	0x08003137
 800311c:	08003125 	.word	0x08003125
 8003120:	080031bb 	.word	0x080031bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d046      	beq.n	80031be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003134:	e043      	b.n	80031be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800313e:	d140      	bne.n	80031c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003144:	e03d      	b.n	80031c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314e:	d121      	bne.n	8003194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d837      	bhi.n	80031c6 <DMA_CheckFifoParam+0xda>
 8003156:	a201      	add	r2, pc, #4	; (adr r2, 800315c <DMA_CheckFifoParam+0x70>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	0800316d 	.word	0x0800316d
 8003160:	08003173 	.word	0x08003173
 8003164:	0800316d 	.word	0x0800316d
 8003168:	08003185 	.word	0x08003185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      break;
 8003170:	e030      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d025      	beq.n	80031ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003182:	e022      	b.n	80031ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800318c:	d11f      	bne.n	80031ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003192:	e01c      	b.n	80031ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d903      	bls.n	80031a2 <DMA_CheckFifoParam+0xb6>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d003      	beq.n	80031a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031a0:	e018      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
      break;
 80031a6:	e015      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00e      	beq.n	80031d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      break;
 80031b8:	e00b      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      break;
 80031ba:	bf00      	nop
 80031bc:	e00a      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031be:	bf00      	nop
 80031c0:	e008      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
 80031c4:	e006      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031c6:	bf00      	nop
 80031c8:	e004      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
    }
  } 
  
  return status; 
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e16b      	b.n	80034d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 815a 	bne.w	80034d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	2b02      	cmp	r3, #2
 8003234:	d130      	bne.n	8003298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0201 	and.w	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d017      	beq.n	80032d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d123      	bne.n	8003328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80b4 	beq.w	80034d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b60      	ldr	r3, [pc, #384]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a5f      	ldr	r2, [pc, #380]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 8003374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003386:	4a5b      	ldr	r2, [pc, #364]	; (80034f4 <HAL_GPIO_Init+0x310>)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_GPIO_Init+0x314>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02b      	beq.n	800340a <HAL_GPIO_Init+0x226>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a51      	ldr	r2, [pc, #324]	; (80034fc <HAL_GPIO_Init+0x318>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d025      	beq.n	8003406 <HAL_GPIO_Init+0x222>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a50      	ldr	r2, [pc, #320]	; (8003500 <HAL_GPIO_Init+0x31c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01f      	beq.n	8003402 <HAL_GPIO_Init+0x21e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4f      	ldr	r2, [pc, #316]	; (8003504 <HAL_GPIO_Init+0x320>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d019      	beq.n	80033fe <HAL_GPIO_Init+0x21a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4e      	ldr	r2, [pc, #312]	; (8003508 <HAL_GPIO_Init+0x324>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_GPIO_Init+0x216>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4d      	ldr	r2, [pc, #308]	; (800350c <HAL_GPIO_Init+0x328>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00d      	beq.n	80033f6 <HAL_GPIO_Init+0x212>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4c      	ldr	r2, [pc, #304]	; (8003510 <HAL_GPIO_Init+0x32c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <HAL_GPIO_Init+0x20e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <HAL_GPIO_Init+0x330>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_GPIO_Init+0x20a>
 80033ea:	2307      	movs	r3, #7
 80033ec:	e00e      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033ee:	2308      	movs	r3, #8
 80033f0:	e00c      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e00a      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e008      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033fe:	2303      	movs	r3, #3
 8003400:	e004      	b.n	800340c <HAL_GPIO_Init+0x228>
 8003402:	2302      	movs	r3, #2
 8003404:	e002      	b.n	800340c <HAL_GPIO_Init+0x228>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_GPIO_Init+0x228>
 800340a:	2300      	movs	r3, #0
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	f002 0203 	and.w	r2, r2, #3
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	4093      	lsls	r3, r2
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800341c:	4935      	ldr	r1, [pc, #212]	; (80034f4 <HAL_GPIO_Init+0x310>)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	3302      	adds	r3, #2
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_GPIO_Init+0x334>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800344e:	4a32      	ldr	r2, [pc, #200]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003454:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003478:	4a27      	ldr	r2, [pc, #156]	; (8003518 <HAL_GPIO_Init+0x334>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a2:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034cc:	4a12      	ldr	r2, [pc, #72]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3301      	adds	r3, #1
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	f67f ae90 	bls.w	8003200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40013800 	.word	0x40013800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	40020400 	.word	0x40020400
 8003500:	40020800 	.word	0x40020800
 8003504:	40020c00 	.word	0x40020c00
 8003508:	40021000 	.word	0x40021000
 800350c:	40021400 	.word	0x40021400
 8003510:	40021800 	.word	0x40021800
 8003514:	40021c00 	.word	0x40021c00
 8003518:	40013c00 	.word	0x40013c00

0800351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
 8003528:	4613      	mov	r3, r2
 800352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003538:	e003      	b.n	8003542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	619a      	str	r2, [r3, #24]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003560:	887a      	ldrh	r2, [r7, #2]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4013      	ands	r3, r2
 8003566:	041a      	lsls	r2, r3, #16
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	43d9      	mvns	r1, r3
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	400b      	ands	r3, r1
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e267      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d075      	beq.n	800368e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a2:	4b88      	ldr	r3, [pc, #544]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4b85      	ldr	r3, [pc, #532]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b82      	ldr	r3, [pc, #520]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4b7e      	ldr	r3, [pc, #504]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x108>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d157      	bne.n	800368c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e242      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x74>
 80035ea:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a75      	ldr	r2, [pc, #468]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x98>
 8003602:	4b70      	ldr	r3, [pc, #448]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6f      	ldr	r2, [pc, #444]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b6d      	ldr	r3, [pc, #436]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6c      	ldr	r2, [pc, #432]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 800361c:	4b69      	ldr	r3, [pc, #420]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a68      	ldr	r2, [pc, #416]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b66      	ldr	r3, [pc, #408]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a65      	ldr	r2, [pc, #404]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fd62 	bl	8002104 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe fd5e 	bl	8002104 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e207      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b5b      	ldr	r3, [pc, #364]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xc0>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe fd4e 	bl	8002104 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fd4a 	bl	8002104 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1f3      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b51      	ldr	r3, [pc, #324]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0xe8>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369a:	4b4a      	ldr	r3, [pc, #296]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b44      	ldr	r3, [pc, #272]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1c7      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4937      	ldr	r1, [pc, #220]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <HAL_RCC_OscConfig+0x244>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fe fd03 	bl	8002104 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003702:	f7fe fcff 	bl	8002104 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1a8      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4925      	ldr	r1, [pc, #148]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <HAL_RCC_OscConfig+0x244>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe fce2 	bl	8002104 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003744:	f7fe fcde 	bl	8002104 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e187      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d036      	beq.n	80037dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <HAL_RCC_OscConfig+0x248>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fe fcc2 	bl	8002104 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe fcbe 	bl	8002104 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e167      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x200>
 80037a2:	e01b      	b.n	80037dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_OscConfig+0x248>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037aa:	f7fe fcab 	bl	8002104 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	e00e      	b.n	80037d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b2:	f7fe fca7 	bl	8002104 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d907      	bls.n	80037d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e150      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	42470000 	.word	0x42470000
 80037cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	4b88      	ldr	r3, [pc, #544]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ea      	bne.n	80037b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8097 	beq.w	8003918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ee:	4b81      	ldr	r3, [pc, #516]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10f      	bne.n	800381a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	4b7d      	ldr	r3, [pc, #500]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4a7c      	ldr	r2, [pc, #496]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
 800380a:	4b7a      	ldr	r3, [pc, #488]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003816:	2301      	movs	r3, #1
 8003818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381a:	4b77      	ldr	r3, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x474>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003826:	4b74      	ldr	r3, [pc, #464]	; (80039f8 <HAL_RCC_OscConfig+0x474>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a73      	ldr	r2, [pc, #460]	; (80039f8 <HAL_RCC_OscConfig+0x474>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fe fc67 	bl	8002104 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fe fc63 	bl	8002104 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e10c      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x474>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d106      	bne.n	800386e <HAL_RCC_OscConfig+0x2ea>
 8003860:	4b64      	ldr	r3, [pc, #400]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a63      	ldr	r2, [pc, #396]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	e01c      	b.n	80038a8 <HAL_RCC_OscConfig+0x324>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b05      	cmp	r3, #5
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x30c>
 8003876:	4b5f      	ldr	r3, [pc, #380]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a5e      	ldr	r2, [pc, #376]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 800387c:	f043 0304 	orr.w	r3, r3, #4
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	4b5c      	ldr	r3, [pc, #368]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	4a5b      	ldr	r2, [pc, #364]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	6713      	str	r3, [r2, #112]	; 0x70
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0x324>
 8003890:	4b58      	ldr	r3, [pc, #352]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a57      	ldr	r2, [pc, #348]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	4b55      	ldr	r3, [pc, #340]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4a54      	ldr	r2, [pc, #336]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 80038a2:	f023 0304 	bic.w	r3, r3, #4
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d015      	beq.n	80038dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fe fc28 	bl	8002104 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fe fc24 	bl	8002104 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0cb      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	4b49      	ldr	r3, [pc, #292]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0ee      	beq.n	80038b8 <HAL_RCC_OscConfig+0x334>
 80038da:	e014      	b.n	8003906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038dc:	f7fe fc12 	bl	8002104 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fe fc0e 	bl	8002104 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0b5      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fa:	4b3e      	ldr	r3, [pc, #248]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ee      	bne.n	80038e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390c:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	4a38      	ldr	r2, [pc, #224]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80a1 	beq.w	8003a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003922:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b08      	cmp	r3, #8
 800392c:	d05c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d141      	bne.n	80039ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_RCC_OscConfig+0x478>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe fbe2 	bl	8002104 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe fbde 	bl	8002104 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e087      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	491b      	ldr	r1, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x478>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fe fbb7 	bl	8002104 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe fbb3 	bl	8002104 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e05c      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x416>
 80039b8:	e054      	b.n	8003a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_RCC_OscConfig+0x478>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe fba0 	bl	8002104 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fe fb9c 	bl	8002104 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e045      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_OscConfig+0x470>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x444>
 80039e6:	e03d      	b.n	8003a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e038      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x4ec>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d028      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d121      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d11a      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d111      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0cc      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d90c      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b65      	ldr	r3, [pc, #404]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0b8      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac8:	4b59      	ldr	r3, [pc, #356]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a58      	ldr	r2, [pc, #352]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae0:	4b53      	ldr	r3, [pc, #332]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a52      	ldr	r2, [pc, #328]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	494d      	ldr	r1, [pc, #308]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d044      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d119      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e07f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b3f      	ldr	r3, [pc, #252]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e067      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4934      	ldr	r1, [pc, #208]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b64:	f7fe face 	bl	8002104 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fe faca 	bl	8002104 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e04f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d20c      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e032      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4916      	ldr	r1, [pc, #88]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	490e      	ldr	r1, [pc, #56]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bfa:	f000 f821 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	490a      	ldr	r1, [pc, #40]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	5ccb      	ldrb	r3, [r1, r3]
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fa2e 	bl	800207c <HAL_InitTick>

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023c00 	.word	0x40023c00
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08007958 	.word	0x08007958
 8003c38:	20000000 	.word	0x20000000
 8003c3c:	20000004 	.word	0x20000004

08003c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c44:	b090      	sub	sp, #64	; 0x40
 8003c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c50:	2300      	movs	r3, #0
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c58:	4b59      	ldr	r3, [pc, #356]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d00d      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x40>
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	f200 80a1 	bhi.w	8003dac <HAL_RCC_GetSysClockFreq+0x16c>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c72:	e09b      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c78:	e09b      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7a:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c7e:	e098      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c80:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8a:	4b4d      	ldr	r3, [pc, #308]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c96:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	627a      	str	r2, [r7, #36]	; 0x24
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cac:	fb03 f201 	mul.w	r2, r3, r1
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	fb00 f303 	mul.w	r3, r0, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	4a43      	ldr	r2, [pc, #268]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cba:	fba0 1202 	umull	r1, r2, r0, r2
 8003cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc0:	460a      	mov	r2, r1
 8003cc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc6:	4413      	add	r3, r2
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ccc:	2200      	movs	r2, #0
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	61fa      	str	r2, [r7, #28]
 8003cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cda:	f7fc ff6f 	bl	8000bbc <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce6:	e053      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	099b      	lsrs	r3, r3, #6
 8003cee:	2200      	movs	r2, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	617a      	str	r2, [r7, #20]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cfa:	f04f 0b00 	mov.w	fp, #0
 8003cfe:	4652      	mov	r2, sl
 8003d00:	465b      	mov	r3, fp
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f04f 0100 	mov.w	r1, #0
 8003d0a:	0159      	lsls	r1, r3, #5
 8003d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d10:	0150      	lsls	r0, r2, #5
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	ebb2 080a 	subs.w	r8, r2, sl
 8003d1a:	eb63 090b 	sbc.w	r9, r3, fp
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d32:	ebb2 0408 	subs.w	r4, r2, r8
 8003d36:	eb63 0509 	sbc.w	r5, r3, r9
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	00eb      	lsls	r3, r5, #3
 8003d44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d48:	00e2      	lsls	r2, r4, #3
 8003d4a:	4614      	mov	r4, r2
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	eb14 030a 	adds.w	r3, r4, sl
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	eb45 030b 	adc.w	r3, r5, fp
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d66:	4629      	mov	r1, r5
 8003d68:	028b      	lsls	r3, r1, #10
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d70:	4621      	mov	r1, r4
 8003d72:	028a      	lsls	r2, r1, #10
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	60fa      	str	r2, [r7, #12]
 8003d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d84:	f7fc ff1a 	bl	8000bbc <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003daa:	e002      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3740      	adds	r7, #64	; 0x40
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	00f42400 	.word	0x00f42400
 8003dc8:	00b71b00 	.word	0x00b71b00

08003dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000000 	.word	0x20000000

08003de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003de8:	f7ff fff0 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0a9b      	lsrs	r3, r3, #10
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40023800 	.word	0x40023800
 8003e08:	08007968 	.word	0x08007968

08003e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e10:	f7ff ffdc 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	0b5b      	lsrs	r3, r3, #13
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	4903      	ldr	r1, [pc, #12]	; (8003e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e22:	5ccb      	ldrb	r3, [r1, r3]
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	08007968 	.word	0x08007968

08003e34 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e01c      	b.n	8003e80 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	795b      	ldrb	r3, [r3, #5]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd feba 	bl	8001bd0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0204 	orr.w	r2, r2, #4
 8003e70:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_RNG_GenerateRandomNumber_IT>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber_IT(RNG_HandleTypeDef *hrng)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	791b      	ldrb	r3, [r3, #4]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RNG_GenerateRandomNumber_IT+0x18>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e01c      	b.n	8003eda <HAL_RNG_GenerateRandomNumber_IT+0x52>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	795b      	ldrb	r3, [r3, #5]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d10b      	bne.n	8003ec8 <HAL_RNG_GenerateRandomNumber_IT+0x40>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	715a      	strb	r2, [r3, #5]

    /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */
    __HAL_RNG_ENABLE_IT(hrng);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0208 	orr.w	r2, r2, #8
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e007      	b.n	8003ed8 <HAL_RNG_GenerateRandomNumber_IT+0x50>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hrng);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	711a      	strb	r2, [r3, #4]

    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2210      	movs	r2, #16
 8003f08:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e009      	b.n	8003f24 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003f20:	2301      	movs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10b      	bne.n	8003f42 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f838 	bl	8003fa6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8003f3e:	605a      	str	r2, [r3, #4]

    return;
 8003f40:	e022      	b.n	8003f88 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01d      	beq.n	8003f88 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0208 	bic.w	r2, r2, #8
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	795b      	ldrb	r3, [r3, #5]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d00b      	beq.n	8003f88 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd fd82 	bl	8001a8c <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_RNG_ReadLastRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval random value
  */
uint32_t HAL_RNG_ReadLastRandomNumber(const RNG_HandleTypeDef *hrng)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  return (hrng->RandomNumber);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e041      	b.n	8004050 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fd fe1d 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f000 ff0d 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d001      	beq.n	8004070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e04e      	b.n	800410e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a23      	ldr	r2, [pc, #140]	; (800411c <HAL_TIM_Base_Start_IT+0xc4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409a:	d01d      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <HAL_TIM_Base_Start_IT+0xc8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_TIM_Base_Start_IT+0xcc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <HAL_TIM_Base_Start_IT+0xd0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_TIM_Base_Start_IT+0xd4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x80>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_TIM_Base_Start_IT+0xdc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d111      	bne.n	80040fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d010      	beq.n	800410c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	e007      	b.n	800410c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800
 8004128:	40000c00 	.word	0x40000c00
 800412c:	40010400 	.word	0x40010400
 8004130:	40014000 	.word	0x40014000
 8004134:	40001800 	.word	0x40001800

08004138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e041      	b.n	80041ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f839 	bl	80041d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 fe4e 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e022      	b.n	800425e <HAL_TIM_PWM_Start_DMA+0x72>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b04      	cmp	r3, #4
 800421c:	d109      	bne.n	8004232 <HAL_TIM_PWM_Start_DMA+0x46>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	e015      	b.n	800425e <HAL_TIM_PWM_Start_DMA+0x72>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d109      	bne.n	800424c <HAL_TIM_PWM_Start_DMA+0x60>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e008      	b.n	800425e <HAL_TIM_PWM_Start_DMA+0x72>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
 8004264:	e171      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_TIM_PWM_Start_DMA+0x94>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e022      	b.n	80042c6 <HAL_TIM_PWM_Start_DMA+0xda>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b04      	cmp	r3, #4
 8004284:	d109      	bne.n	800429a <HAL_TIM_PWM_Start_DMA+0xae>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e015      	b.n	80042c6 <HAL_TIM_PWM_Start_DMA+0xda>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d109      	bne.n	80042b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e008      	b.n	80042c6 <HAL_TIM_PWM_Start_DMA+0xda>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d024      	beq.n	8004314 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_TIM_PWM_Start_DMA+0xea>
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e137      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start_DMA+0xfe>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e8:	e016      	b.n	8004318 <HAL_TIM_PWM_Start_DMA+0x12c>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start_DMA+0x10e>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f8:	e00e      	b.n	8004318 <HAL_TIM_PWM_Start_DMA+0x12c>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Start_DMA+0x11e>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	e006      	b.n	8004318 <HAL_TIM_PWM_Start_DMA+0x12c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2202      	movs	r2, #2
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004312:	e001      	b.n	8004318 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e118      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	f200 80ae 	bhi.w	800447c <HAL_TIM_PWM_Start_DMA+0x290>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	0800435d 	.word	0x0800435d
 800432c:	0800447d 	.word	0x0800447d
 8004330:	0800447d 	.word	0x0800447d
 8004334:	0800447d 	.word	0x0800447d
 8004338:	080043a5 	.word	0x080043a5
 800433c:	0800447d 	.word	0x0800447d
 8004340:	0800447d 	.word	0x0800447d
 8004344:	0800447d 	.word	0x0800447d
 8004348:	080043ed 	.word	0x080043ed
 800434c:	0800447d 	.word	0x0800447d
 8004350:	0800447d 	.word	0x0800447d
 8004354:	0800447d 	.word	0x0800447d
 8004358:	08004435 	.word	0x08004435
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	4a7c      	ldr	r2, [pc, #496]	; (8004554 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004362:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	4a7b      	ldr	r2, [pc, #492]	; (8004558 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800436a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	4a7a      	ldr	r2, [pc, #488]	; (800455c <HAL_TIM_PWM_Start_DMA+0x370>)
 8004372:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3334      	adds	r3, #52	; 0x34
 8004380:	461a      	mov	r2, r3
 8004382:	887b      	ldrh	r3, [r7, #2]
 8004384:	f7fe fc4a 	bl	8002c1c <HAL_DMA_Start_IT>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0db      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a0:	60da      	str	r2, [r3, #12]
      break;
 80043a2:	e06e      	b.n	8004482 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	4a6a      	ldr	r2, [pc, #424]	; (8004554 <HAL_TIM_PWM_Start_DMA+0x368>)
 80043aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	4a69      	ldr	r2, [pc, #420]	; (8004558 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	4a68      	ldr	r2, [pc, #416]	; (800455c <HAL_TIM_PWM_Start_DMA+0x370>)
 80043ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3338      	adds	r3, #56	; 0x38
 80043c8:	461a      	mov	r2, r3
 80043ca:	887b      	ldrh	r3, [r7, #2]
 80043cc:	f7fe fc26 	bl	8002c1c <HAL_DMA_Start_IT>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0b7      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e8:	60da      	str	r2, [r3, #12]
      break;
 80043ea:	e04a      	b.n	8004482 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4a58      	ldr	r2, [pc, #352]	; (8004554 <HAL_TIM_PWM_Start_DMA+0x368>)
 80043f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	4a57      	ldr	r2, [pc, #348]	; (8004558 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4a56      	ldr	r2, [pc, #344]	; (800455c <HAL_TIM_PWM_Start_DMA+0x370>)
 8004402:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	333c      	adds	r3, #60	; 0x3c
 8004410:	461a      	mov	r2, r3
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	f7fe fc02 	bl	8002c1c <HAL_DMA_Start_IT>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e093      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004430:	60da      	str	r2, [r3, #12]
      break;
 8004432:	e026      	b.n	8004482 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	4a46      	ldr	r2, [pc, #280]	; (8004554 <HAL_TIM_PWM_Start_DMA+0x368>)
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	4a45      	ldr	r2, [pc, #276]	; (8004558 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	4a44      	ldr	r2, [pc, #272]	; (800455c <HAL_TIM_PWM_Start_DMA+0x370>)
 800444a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3340      	adds	r3, #64	; 0x40
 8004458:	461a      	mov	r2, r3
 800445a:	887b      	ldrh	r3, [r7, #2]
 800445c:	f7fe fbde 	bl	8002c1c <HAL_DMA_Start_IT>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e06f      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004478:	60da      	str	r2, [r3, #12]
      break;
 800447a:	e002      	b.n	8004482 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
      break;
 8004480:	bf00      	nop
  }

  if (status == HAL_OK)
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d15f      	bne.n	8004548 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2201      	movs	r2, #1
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 ffb7 	bl	8005404 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a31      	ldr	r2, [pc, #196]	; (8004560 <HAL_TIM_PWM_Start_DMA+0x374>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIM_PWM_Start_DMA+0x2be>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2f      	ldr	r2, [pc, #188]	; (8004564 <HAL_TIM_PWM_Start_DMA+0x378>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_PWM_Start_DMA+0x2c2>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a25      	ldr	r2, [pc, #148]	; (8004560 <HAL_TIM_PWM_Start_DMA+0x374>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d022      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x328>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d6:	d01d      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x328>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a22      	ldr	r2, [pc, #136]	; (8004568 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x328>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a21      	ldr	r2, [pc, #132]	; (800456c <HAL_TIM_PWM_Start_DMA+0x380>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d013      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x328>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <HAL_TIM_PWM_Start_DMA+0x384>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x328>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1a      	ldr	r2, [pc, #104]	; (8004564 <HAL_TIM_PWM_Start_DMA+0x378>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x328>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x328>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1a      	ldr	r2, [pc, #104]	; (8004578 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d010      	beq.n	8004548 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	e007      	b.n	8004548 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	08004d09 	.word	0x08004d09
 8004558:	08004db1 	.word	0x08004db1
 800455c:	08004c77 	.word	0x08004c77
 8004560:	40010000 	.word	0x40010000
 8004564:	40010400 	.word	0x40010400
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800
 8004570:	40000c00 	.word	0x40000c00
 8004574:	40014000 	.word	0x40014000
 8004578:	40001800 	.word	0x40001800

0800457c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d855      	bhi.n	800463c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045cd 	.word	0x080045cd
 800459c:	0800463d 	.word	0x0800463d
 80045a0:	0800463d 	.word	0x0800463d
 80045a4:	0800463d 	.word	0x0800463d
 80045a8:	080045e9 	.word	0x080045e9
 80045ac:	0800463d 	.word	0x0800463d
 80045b0:	0800463d 	.word	0x0800463d
 80045b4:	0800463d 	.word	0x0800463d
 80045b8:	08004605 	.word	0x08004605
 80045bc:	0800463d 	.word	0x0800463d
 80045c0:	0800463d 	.word	0x0800463d
 80045c4:	0800463d 	.word	0x0800463d
 80045c8:	08004621 	.word	0x08004621
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe fb73 	bl	8002ccc <HAL_DMA_Abort_IT>
      break;
 80045e6:	e02c      	b.n	8004642 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fb65 	bl	8002ccc <HAL_DMA_Abort_IT>
      break;
 8004602:	e01e      	b.n	8004642 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004612:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fb57 	bl	8002ccc <HAL_DMA_Abort_IT>
      break;
 800461e:	e010      	b.n	8004642 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800462e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fb49 	bl	8002ccc <HAL_DMA_Abort_IT>
      break;
 800463a:	e002      	b.n	8004642 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	bf00      	nop
  }

  if (status == HAL_OK)
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d161      	bne.n	800470c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2200      	movs	r2, #0
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fed7 	bl	8005404 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2f      	ldr	r2, [pc, #188]	; (8004718 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIM_PWM_Stop_DMA+0xee>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2d      	ldr	r2, [pc, #180]	; (800471c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_Stop_DMA+0xf2>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	f241 1311 	movw	r3, #4369	; 0x1111
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	f240 4344 	movw	r3, #1092	; 0x444
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10f      	bne.n	80046d4 <HAL_TIM_PWM_Stop_DMA+0x158>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6a1a      	ldr	r2, [r3, #32]
 80046ba:	f240 4344 	movw	r3, #1092	; 0x444
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_PWM_Stop_DMA+0x158>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <HAL_TIM_PWM_Stop_DMA+0x168>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e2:	e013      	b.n	800470c <HAL_TIM_PWM_Stop_DMA+0x190>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d104      	bne.n	80046f4 <HAL_TIM_PWM_Stop_DMA+0x178>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f2:	e00b      	b.n	800470c <HAL_TIM_PWM_Stop_DMA+0x190>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d104      	bne.n	8004704 <HAL_TIM_PWM_Stop_DMA+0x188>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004702:	e003      	b.n	800470c <HAL_TIM_PWM_Stop_DMA+0x190>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40010400 	.word	0x40010400

08004720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d020      	beq.n	8004784 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01b      	beq.n	8004784 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0202 	mvn.w	r2, #2
 8004754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa5b 	bl	8004c26 <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa4d 	bl	8004c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fd f94d 	bl	8001a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d020      	beq.n	80047d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0204 	mvn.w	r2, #4
 80047a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa35 	bl	8004c26 <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fa27 	bl	8004c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fd f927 	bl	8001a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d020      	beq.n	800481c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0208 	mvn.w	r2, #8
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2204      	movs	r2, #4
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa0f 	bl	8004c26 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa01 	bl	8004c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7fd f901 	bl	8001a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	d020      	beq.n	8004868 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0210 	mvn.w	r2, #16
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2208      	movs	r2, #8
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9e9 	bl	8004c26 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9db 	bl	8004c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fd f8db 	bl	8001a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00c      	beq.n	800488c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0201 	mvn.w	r2, #1
 8004884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fd f8e0 	bl	8001a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00c      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fe56 	bl	800555c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9bd 	bl	8004c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00c      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0220 	mvn.w	r2, #32
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fe28 	bl	8005548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800491a:	2302      	movs	r3, #2
 800491c:	e0ae      	b.n	8004a7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	f200 809f 	bhi.w	8004a6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004969 	.word	0x08004969
 8004938:	08004a6d 	.word	0x08004a6d
 800493c:	08004a6d 	.word	0x08004a6d
 8004940:	08004a6d 	.word	0x08004a6d
 8004944:	080049a9 	.word	0x080049a9
 8004948:	08004a6d 	.word	0x08004a6d
 800494c:	08004a6d 	.word	0x08004a6d
 8004950:	08004a6d 	.word	0x08004a6d
 8004954:	080049eb 	.word	0x080049eb
 8004958:	08004a6d 	.word	0x08004a6d
 800495c:	08004a6d 	.word	0x08004a6d
 8004960:	08004a6d 	.word	0x08004a6d
 8004964:	08004a2b 	.word	0x08004a2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fafe 	bl	8004f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0204 	bic.w	r2, r2, #4
 8004992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	619a      	str	r2, [r3, #24]
      break;
 80049a6:	e064      	b.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fb4e 	bl	8005050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	619a      	str	r2, [r3, #24]
      break;
 80049e8:	e043      	b.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fba3 	bl	800513c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0208 	orr.w	r2, r2, #8
 8004a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0204 	bic.w	r2, r2, #4
 8004a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69d9      	ldr	r1, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	61da      	str	r2, [r3, #28]
      break;
 8004a28:	e023      	b.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fbf7 	bl	8005224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69d9      	ldr	r1, [r3, #28]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	021a      	lsls	r2, r3, #8
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	61da      	str	r2, [r3, #28]
      break;
 8004a6a:	e002      	b.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e0b4      	b.n	8004c0a <HAL_TIM_ConfigClockSource+0x186>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad8:	d03e      	beq.n	8004b58 <HAL_TIM_ConfigClockSource+0xd4>
 8004ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ade:	f200 8087 	bhi.w	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	f000 8086 	beq.w	8004bf6 <HAL_TIM_ConfigClockSource+0x172>
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	d87f      	bhi.n	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b70      	cmp	r3, #112	; 0x70
 8004af2:	d01a      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0xa6>
 8004af4:	2b70      	cmp	r3, #112	; 0x70
 8004af6:	d87b      	bhi.n	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b60      	cmp	r3, #96	; 0x60
 8004afa:	d050      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x11a>
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d877      	bhi.n	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b50      	cmp	r3, #80	; 0x50
 8004b02:	d03c      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0xfa>
 8004b04:	2b50      	cmp	r3, #80	; 0x50
 8004b06:	d873      	bhi.n	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d058      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x13a>
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d86f      	bhi.n	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b30      	cmp	r3, #48	; 0x30
 8004b12:	d064      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x15a>
 8004b14:	2b30      	cmp	r3, #48	; 0x30
 8004b16:	d86b      	bhi.n	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d060      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x15a>
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d867      	bhi.n	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d05c      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x15a>
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d05a      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x15a>
 8004b28:	e062      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b3a:	f000 fc43 	bl	80053c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	609a      	str	r2, [r3, #8]
      break;
 8004b56:	e04f      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b68:	f000 fc2c 	bl	80053c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b7a:	609a      	str	r2, [r3, #8]
      break;
 8004b7c:	e03c      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f000 fba0 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2150      	movs	r1, #80	; 0x50
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fbf9 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 8004b9c:	e02c      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 fbbf 	bl	800532e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2160      	movs	r1, #96	; 0x60
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fbe9 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e01c      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fb80 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2140      	movs	r1, #64	; 0x40
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fbd9 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e00c      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f000 fbd0 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 8004bee:	e003      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf4:	e000      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d107      	bne.n	8004c9e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c9c:	e02a      	b.n	8004cf4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d107      	bne.n	8004cb8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2202      	movs	r2, #2
 8004cac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb6:	e01d      	b.n	8004cf4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d107      	bne.n	8004cd2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd0:	e010      	b.n	8004cf4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d107      	bne.n	8004cec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2208      	movs	r2, #8
 8004ce0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cea:	e003      	b.n	8004cf4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff ffb4 	bl	8004c62 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d10b      	bne.n	8004d38 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d136      	bne.n	8004d9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d36:	e031      	b.n	8004d9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d10b      	bne.n	8004d5a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2202      	movs	r2, #2
 8004d46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d125      	bne.n	8004d9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d58:	e020      	b.n	8004d9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d10b      	bne.n	8004d7c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2204      	movs	r2, #4
 8004d68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d114      	bne.n	8004d9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d7a:	e00f      	b.n	8004d9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d10a      	bne.n	8004d9c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d103      	bne.n	8004d9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7fc fe3b 	bl	8001a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d103      	bne.n	8004dd0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	771a      	strb	r2, [r3, #28]
 8004dce:	e019      	b.n	8004e04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d103      	bne.n	8004de2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	771a      	strb	r2, [r3, #28]
 8004de0:	e010      	b.n	8004e04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d103      	bne.n	8004df4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2204      	movs	r2, #4
 8004df0:	771a      	strb	r2, [r3, #28]
 8004df2:	e007      	b.n	8004e04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d102      	bne.n	8004e04 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2208      	movs	r2, #8
 8004e02:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff ff18 	bl	8004c3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a46      	ldr	r2, [pc, #280]	; (8004f44 <TIM_Base_SetConfig+0x12c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d00f      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a43      	ldr	r2, [pc, #268]	; (8004f48 <TIM_Base_SetConfig+0x130>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a42      	ldr	r2, [pc, #264]	; (8004f4c <TIM_Base_SetConfig+0x134>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a41      	ldr	r2, [pc, #260]	; (8004f50 <TIM_Base_SetConfig+0x138>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a40      	ldr	r2, [pc, #256]	; (8004f54 <TIM_Base_SetConfig+0x13c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d108      	bne.n	8004e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a35      	ldr	r2, [pc, #212]	; (8004f44 <TIM_Base_SetConfig+0x12c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e78:	d027      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a32      	ldr	r2, [pc, #200]	; (8004f48 <TIM_Base_SetConfig+0x130>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d023      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a31      	ldr	r2, [pc, #196]	; (8004f4c <TIM_Base_SetConfig+0x134>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a30      	ldr	r2, [pc, #192]	; (8004f50 <TIM_Base_SetConfig+0x138>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2f      	ldr	r2, [pc, #188]	; (8004f54 <TIM_Base_SetConfig+0x13c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	; (8004f58 <TIM_Base_SetConfig+0x140>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2d      	ldr	r2, [pc, #180]	; (8004f5c <TIM_Base_SetConfig+0x144>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	; (8004f60 <TIM_Base_SetConfig+0x148>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2b      	ldr	r2, [pc, #172]	; (8004f64 <TIM_Base_SetConfig+0x14c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <TIM_Base_SetConfig+0x150>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <TIM_Base_SetConfig+0x154>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <TIM_Base_SetConfig+0x12c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_Base_SetConfig+0xf8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <TIM_Base_SetConfig+0x13c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d103      	bne.n	8004f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d105      	bne.n	8004f36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f023 0201 	bic.w	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	611a      	str	r2, [r3, #16]
  }
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40010400 	.word	0x40010400
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800
 8004f64:	40001800 	.word	0x40001800
 8004f68:	40001c00 	.word	0x40001c00
 8004f6c:	40002000 	.word	0x40002000

08004f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f023 0201 	bic.w	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 0302 	bic.w	r3, r3, #2
 8004fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a20      	ldr	r2, [pc, #128]	; (8005048 <TIM_OC1_SetConfig+0xd8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_OC1_SetConfig+0x64>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1f      	ldr	r2, [pc, #124]	; (800504c <TIM_OC1_SetConfig+0xdc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d10c      	bne.n	8004fee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0308 	bic.w	r3, r3, #8
 8004fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a15      	ldr	r2, [pc, #84]	; (8005048 <TIM_OC1_SetConfig+0xd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC1_SetConfig+0x8e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a14      	ldr	r2, [pc, #80]	; (800504c <TIM_OC1_SetConfig+0xdc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d111      	bne.n	8005022 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800500c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	40010000 	.word	0x40010000
 800504c:	40010400 	.word	0x40010400

08005050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0210 	bic.w	r2, r3, #16
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0320 	bic.w	r3, r3, #32
 800509a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a22      	ldr	r2, [pc, #136]	; (8005134 <TIM_OC2_SetConfig+0xe4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC2_SetConfig+0x68>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a21      	ldr	r2, [pc, #132]	; (8005138 <TIM_OC2_SetConfig+0xe8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10d      	bne.n	80050d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a17      	ldr	r2, [pc, #92]	; (8005134 <TIM_OC2_SetConfig+0xe4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_OC2_SetConfig+0x94>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a16      	ldr	r2, [pc, #88]	; (8005138 <TIM_OC2_SetConfig+0xe8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d113      	bne.n	800510c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40010400 	.word	0x40010400

0800513c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a21      	ldr	r2, [pc, #132]	; (800521c <TIM_OC3_SetConfig+0xe0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_OC3_SetConfig+0x66>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a20      	ldr	r2, [pc, #128]	; (8005220 <TIM_OC3_SetConfig+0xe4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10d      	bne.n	80051be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a16      	ldr	r2, [pc, #88]	; (800521c <TIM_OC3_SetConfig+0xe0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_OC3_SetConfig+0x92>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a15      	ldr	r2, [pc, #84]	; (8005220 <TIM_OC3_SetConfig+0xe4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d113      	bne.n	80051f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40010000 	.word	0x40010000
 8005220:	40010400 	.word	0x40010400

08005224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800526e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	031b      	lsls	r3, r3, #12
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <TIM_OC4_SetConfig+0xa4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_OC4_SetConfig+0x68>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a11      	ldr	r2, [pc, #68]	; (80052cc <TIM_OC4_SetConfig+0xa8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d109      	bne.n	80052a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	019b      	lsls	r3, r3, #6
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40010400 	.word	0x40010400

080052d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 030a 	bic.w	r3, r3, #10
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532e:	b480      	push	{r7}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0210 	bic.w	r2, r3, #16
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	031b      	lsls	r3, r3, #12
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800536a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f043 0307 	orr.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	609a      	str	r2, [r3, #8]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	2201      	movs	r2, #1
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a1a      	ldr	r2, [r3, #32]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	43db      	mvns	r3, r3
 8005426:	401a      	ands	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1a      	ldr	r2, [r3, #32]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005464:	2302      	movs	r3, #2
 8005466:	e05a      	b.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a21      	ldr	r2, [pc, #132]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d01d      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1d      	ldr	r2, [pc, #116]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1a      	ldr	r2, [pc, #104]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a17      	ldr	r2, [pc, #92]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a15      	ldr	r2, [pc, #84]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10c      	bne.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4313      	orrs	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40010400 	.word	0x40010400
 8005540:	40014000 	.word	0x40014000
 8005544:	40001800 	.word	0x40001800

08005548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e042      	b.n	8005608 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fc fbfc 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	; 0x24
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f973 	bl	80058a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b20      	cmp	r3, #32
 800562e:	d175      	bne.n	800571c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_UART_Transmit+0x2c>
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e06e      	b.n	800571e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2221      	movs	r2, #33	; 0x21
 800564a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564e:	f7fc fd59 	bl	8002104 <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005668:	d108      	bne.n	800567c <HAL_UART_Transmit+0x6c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e003      	b.n	8005684 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005684:	e02e      	b.n	80056e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f848 	bl	8005726 <UART_WaitOnFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e03a      	b.n	800571e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	3302      	adds	r3, #2
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e007      	b.n	80056d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3301      	adds	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1cb      	bne.n	8005686 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2140      	movs	r1, #64	; 0x40
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f814 	bl	8005726 <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e006      	b.n	800571e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e000      	b.n	800571e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005736:	e03b      	b.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d037      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005740:	f7fc fce0 	bl	8002104 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	429a      	cmp	r2, r3
 800574e:	d302      	bcc.n	8005756 <UART_WaitOnFlagUntilTimeout+0x30>
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e03a      	b.n	80057d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d023      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d020      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d01d      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b08      	cmp	r3, #8
 8005780:	d116      	bne.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f81d 	bl	80057d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2208      	movs	r2, #8
 80057a2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e00f      	b.n	80057d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4013      	ands	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	429a      	cmp	r2, r3
 80057be:	bf0c      	ite	eq
 80057c0:	2301      	moveq	r3, #1
 80057c2:	2300      	movne	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d0b4      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b095      	sub	sp, #84	; 0x54
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005800:	643a      	str	r2, [r7, #64]	; 0x40
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3314      	adds	r3, #20
 800581a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	61fb      	str	r3, [r7, #28]
   return(result);
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f023 0301 	bic.w	r3, r3, #1
 800582a:	64bb      	str	r3, [r7, #72]	; 0x48
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3314      	adds	r3, #20
 8005832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	d119      	bne.n	8005884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 0310 	bic.w	r3, r3, #16
 8005866:	647b      	str	r3, [r7, #68]	; 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005870:	61ba      	str	r2, [r7, #24]
 8005872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6979      	ldr	r1, [r7, #20]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	613b      	str	r3, [r7, #16]
   return(result);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e5      	bne.n	8005850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005892:	bf00      	nop
 8005894:	3754      	adds	r7, #84	; 0x54
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a4:	b0c0      	sub	sp, #256	; 0x100
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	68d9      	ldr	r1, [r3, #12]
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	ea40 0301 	orr.w	r3, r0, r1
 80058c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	431a      	orrs	r2, r3
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058f8:	f021 010c 	bic.w	r1, r1, #12
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005906:	430b      	orrs	r3, r1
 8005908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800590a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591a:	6999      	ldr	r1, [r3, #24]
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	ea40 0301 	orr.w	r3, r0, r1
 8005926:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4b8f      	ldr	r3, [pc, #572]	; (8005b6c <UART_SetConfig+0x2cc>)
 8005930:	429a      	cmp	r2, r3
 8005932:	d005      	beq.n	8005940 <UART_SetConfig+0xa0>
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b8d      	ldr	r3, [pc, #564]	; (8005b70 <UART_SetConfig+0x2d0>)
 800593c:	429a      	cmp	r2, r3
 800593e:	d104      	bne.n	800594a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005940:	f7fe fa64 	bl	8003e0c <HAL_RCC_GetPCLK2Freq>
 8005944:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005948:	e003      	b.n	8005952 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800594a:	f7fe fa4b 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 800594e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595c:	f040 810c 	bne.w	8005b78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005964:	2200      	movs	r2, #0
 8005966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800596a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800596e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005972:	4622      	mov	r2, r4
 8005974:	462b      	mov	r3, r5
 8005976:	1891      	adds	r1, r2, r2
 8005978:	65b9      	str	r1, [r7, #88]	; 0x58
 800597a:	415b      	adcs	r3, r3
 800597c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800597e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005982:	4621      	mov	r1, r4
 8005984:	eb12 0801 	adds.w	r8, r2, r1
 8005988:	4629      	mov	r1, r5
 800598a:	eb43 0901 	adc.w	r9, r3, r1
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800599e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a2:	4690      	mov	r8, r2
 80059a4:	4699      	mov	r9, r3
 80059a6:	4623      	mov	r3, r4
 80059a8:	eb18 0303 	adds.w	r3, r8, r3
 80059ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059b0:	462b      	mov	r3, r5
 80059b2:	eb49 0303 	adc.w	r3, r9, r3
 80059b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059ce:	460b      	mov	r3, r1
 80059d0:	18db      	adds	r3, r3, r3
 80059d2:	653b      	str	r3, [r7, #80]	; 0x50
 80059d4:	4613      	mov	r3, r2
 80059d6:	eb42 0303 	adc.w	r3, r2, r3
 80059da:	657b      	str	r3, [r7, #84]	; 0x54
 80059dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059e4:	f7fb f8ea 	bl	8000bbc <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4b61      	ldr	r3, [pc, #388]	; (8005b74 <UART_SetConfig+0x2d4>)
 80059ee:	fba3 2302 	umull	r2, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	011c      	lsls	r4, r3, #4
 80059f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a08:	4642      	mov	r2, r8
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	1891      	adds	r1, r2, r2
 8005a0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a10:	415b      	adcs	r3, r3
 8005a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a18:	4641      	mov	r1, r8
 8005a1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a1e:	4649      	mov	r1, r9
 8005a20:	eb43 0b01 	adc.w	fp, r3, r1
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a38:	4692      	mov	sl, r2
 8005a3a:	469b      	mov	fp, r3
 8005a3c:	4643      	mov	r3, r8
 8005a3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a46:	464b      	mov	r3, r9
 8005a48:	eb4b 0303 	adc.w	r3, fp, r3
 8005a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a64:	460b      	mov	r3, r1
 8005a66:	18db      	adds	r3, r3, r3
 8005a68:	643b      	str	r3, [r7, #64]	; 0x40
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	eb42 0303 	adc.w	r3, r2, r3
 8005a70:	647b      	str	r3, [r7, #68]	; 0x44
 8005a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a7a:	f7fb f89f 	bl	8000bbc <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	4b3b      	ldr	r3, [pc, #236]	; (8005b74 <UART_SetConfig+0x2d4>)
 8005a86:	fba3 2301 	umull	r2, r3, r3, r1
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2264      	movs	r2, #100	; 0x64
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	1acb      	subs	r3, r1, r3
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a9a:	4b36      	ldr	r3, [pc, #216]	; (8005b74 <UART_SetConfig+0x2d4>)
 8005a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005aa8:	441c      	add	r4, r3
 8005aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ab4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ab8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005abc:	4642      	mov	r2, r8
 8005abe:	464b      	mov	r3, r9
 8005ac0:	1891      	adds	r1, r2, r2
 8005ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ac4:	415b      	adcs	r3, r3
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005acc:	4641      	mov	r1, r8
 8005ace:	1851      	adds	r1, r2, r1
 8005ad0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	414b      	adcs	r3, r1
 8005ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	00cb      	lsls	r3, r1, #3
 8005ae8:	4651      	mov	r1, sl
 8005aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aee:	4651      	mov	r1, sl
 8005af0:	00ca      	lsls	r2, r1, #3
 8005af2:	4610      	mov	r0, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	4642      	mov	r2, r8
 8005afa:	189b      	adds	r3, r3, r2
 8005afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b00:	464b      	mov	r3, r9
 8005b02:	460a      	mov	r2, r1
 8005b04:	eb42 0303 	adc.w	r3, r2, r3
 8005b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b20:	460b      	mov	r3, r1
 8005b22:	18db      	adds	r3, r3, r3
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b26:	4613      	mov	r3, r2
 8005b28:	eb42 0303 	adc.w	r3, r2, r3
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b36:	f7fb f841 	bl	8000bbc <__aeabi_uldivmod>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <UART_SetConfig+0x2d4>)
 8005b40:	fba3 1302 	umull	r1, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	2164      	movs	r1, #100	; 0x64
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	3332      	adds	r3, #50	; 0x32
 8005b52:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <UART_SetConfig+0x2d4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f003 0207 	and.w	r2, r3, #7
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4422      	add	r2, r4
 8005b66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b68:	e106      	b.n	8005d78 <UART_SetConfig+0x4d8>
 8005b6a:	bf00      	nop
 8005b6c:	40011000 	.word	0x40011000
 8005b70:	40011400 	.word	0x40011400
 8005b74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	1891      	adds	r1, r2, r2
 8005b90:	6239      	str	r1, [r7, #32]
 8005b92:	415b      	adcs	r3, r3
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
 8005b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9a:	4641      	mov	r1, r8
 8005b9c:	1854      	adds	r4, r2, r1
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	eb43 0501 	adc.w	r5, r3, r1
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	00eb      	lsls	r3, r5, #3
 8005bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb2:	00e2      	lsls	r2, r4, #3
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	461d      	mov	r5, r3
 8005bb8:	4643      	mov	r3, r8
 8005bba:	18e3      	adds	r3, r4, r3
 8005bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bc0:	464b      	mov	r3, r9
 8005bc2:	eb45 0303 	adc.w	r3, r5, r3
 8005bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bda:	f04f 0200 	mov.w	r2, #0
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005be6:	4629      	mov	r1, r5
 8005be8:	008b      	lsls	r3, r1, #2
 8005bea:	4621      	mov	r1, r4
 8005bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	008a      	lsls	r2, r1, #2
 8005bf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bf8:	f7fa ffe0 	bl	8000bbc <__aeabi_uldivmod>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4b60      	ldr	r3, [pc, #384]	; (8005d84 <UART_SetConfig+0x4e4>)
 8005c02:	fba3 2302 	umull	r2, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	011c      	lsls	r4, r3, #4
 8005c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	1891      	adds	r1, r2, r2
 8005c22:	61b9      	str	r1, [r7, #24]
 8005c24:	415b      	adcs	r3, r3
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	1851      	adds	r1, r2, r1
 8005c30:	6139      	str	r1, [r7, #16]
 8005c32:	4649      	mov	r1, r9
 8005c34:	414b      	adcs	r3, r1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c44:	4659      	mov	r1, fp
 8005c46:	00cb      	lsls	r3, r1, #3
 8005c48:	4651      	mov	r1, sl
 8005c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4e:	4651      	mov	r1, sl
 8005c50:	00ca      	lsls	r2, r1, #3
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	4642      	mov	r2, r8
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c60:	464b      	mov	r3, r9
 8005c62:	460a      	mov	r2, r1
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c84:	4649      	mov	r1, r9
 8005c86:	008b      	lsls	r3, r1, #2
 8005c88:	4641      	mov	r1, r8
 8005c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c8e:	4641      	mov	r1, r8
 8005c90:	008a      	lsls	r2, r1, #2
 8005c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c96:	f7fa ff91 	bl	8000bbc <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <UART_SetConfig+0x4e4>)
 8005ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	2264      	movs	r2, #100	; 0x64
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
 8005cae:	1acb      	subs	r3, r1, r3
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	3332      	adds	r3, #50	; 0x32
 8005cb4:	4a33      	ldr	r2, [pc, #204]	; (8005d84 <UART_SetConfig+0x4e4>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc0:	441c      	add	r4, r3
 8005cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	673b      	str	r3, [r7, #112]	; 0x70
 8005cca:	677a      	str	r2, [r7, #116]	; 0x74
 8005ccc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	1891      	adds	r1, r2, r2
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	415b      	adcs	r3, r3
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	1851      	adds	r1, r2, r1
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	414b      	adcs	r3, r1
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	00cb      	lsls	r3, r1, #3
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d02:	4651      	mov	r1, sl
 8005d04:	00ca      	lsls	r2, r1, #3
 8005d06:	4610      	mov	r0, r2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	189b      	adds	r3, r3, r2
 8005d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d12:	464b      	mov	r3, r9
 8005d14:	460a      	mov	r2, r1
 8005d16:	eb42 0303 	adc.w	r3, r2, r3
 8005d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	663b      	str	r3, [r7, #96]	; 0x60
 8005d26:	667a      	str	r2, [r7, #100]	; 0x64
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d34:	4649      	mov	r1, r9
 8005d36:	008b      	lsls	r3, r1, #2
 8005d38:	4641      	mov	r1, r8
 8005d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d3e:	4641      	mov	r1, r8
 8005d40:	008a      	lsls	r2, r1, #2
 8005d42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d46:	f7fa ff39 	bl	8000bbc <__aeabi_uldivmod>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <UART_SetConfig+0x4e4>)
 8005d50:	fba3 1302 	umull	r1, r3, r3, r2
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	2164      	movs	r1, #100	; 0x64
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	3332      	adds	r3, #50	; 0x32
 8005d62:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <UART_SetConfig+0x4e4>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4422      	add	r2, r4
 8005d76:	609a      	str	r2, [r3, #8]
}
 8005d78:	bf00      	nop
 8005d7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d84:	51eb851f 	.word	0x51eb851f

08005d88 <siprintf>:
 8005d88:	b40e      	push	{r1, r2, r3}
 8005d8a:	b500      	push	{lr}
 8005d8c:	b09c      	sub	sp, #112	; 0x70
 8005d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d90:	9002      	str	r0, [sp, #8]
 8005d92:	9006      	str	r0, [sp, #24]
 8005d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d98:	4809      	ldr	r0, [pc, #36]	; (8005dc0 <siprintf+0x38>)
 8005d9a:	9107      	str	r1, [sp, #28]
 8005d9c:	9104      	str	r1, [sp, #16]
 8005d9e:	4909      	ldr	r1, [pc, #36]	; (8005dc4 <siprintf+0x3c>)
 8005da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da4:	9105      	str	r1, [sp, #20]
 8005da6:	6800      	ldr	r0, [r0, #0]
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	a902      	add	r1, sp, #8
 8005dac:	f000 f992 	bl	80060d4 <_svfiprintf_r>
 8005db0:	9b02      	ldr	r3, [sp, #8]
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	b01c      	add	sp, #112	; 0x70
 8005db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dbc:	b003      	add	sp, #12
 8005dbe:	4770      	bx	lr
 8005dc0:	20000058 	.word	0x20000058
 8005dc4:	ffff0208 	.word	0xffff0208

08005dc8 <memset>:
 8005dc8:	4402      	add	r2, r0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d100      	bne.n	8005dd2 <memset+0xa>
 8005dd0:	4770      	bx	lr
 8005dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd6:	e7f9      	b.n	8005dcc <memset+0x4>

08005dd8 <__errno>:
 8005dd8:	4b01      	ldr	r3, [pc, #4]	; (8005de0 <__errno+0x8>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000058 	.word	0x20000058

08005de4 <__libc_init_array>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4d0d      	ldr	r5, [pc, #52]	; (8005e1c <__libc_init_array+0x38>)
 8005de8:	4c0d      	ldr	r4, [pc, #52]	; (8005e20 <__libc_init_array+0x3c>)
 8005dea:	1b64      	subs	r4, r4, r5
 8005dec:	10a4      	asrs	r4, r4, #2
 8005dee:	2600      	movs	r6, #0
 8005df0:	42a6      	cmp	r6, r4
 8005df2:	d109      	bne.n	8005e08 <__libc_init_array+0x24>
 8005df4:	4d0b      	ldr	r5, [pc, #44]	; (8005e24 <__libc_init_array+0x40>)
 8005df6:	4c0c      	ldr	r4, [pc, #48]	; (8005e28 <__libc_init_array+0x44>)
 8005df8:	f001 fd0a 	bl	8007810 <_init>
 8005dfc:	1b64      	subs	r4, r4, r5
 8005dfe:	10a4      	asrs	r4, r4, #2
 8005e00:	2600      	movs	r6, #0
 8005e02:	42a6      	cmp	r6, r4
 8005e04:	d105      	bne.n	8005e12 <__libc_init_array+0x2e>
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0c:	4798      	blx	r3
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7ee      	b.n	8005df0 <__libc_init_array+0xc>
 8005e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e16:	4798      	blx	r3
 8005e18:	3601      	adds	r6, #1
 8005e1a:	e7f2      	b.n	8005e02 <__libc_init_array+0x1e>
 8005e1c:	08007b90 	.word	0x08007b90
 8005e20:	08007b90 	.word	0x08007b90
 8005e24:	08007b90 	.word	0x08007b90
 8005e28:	08007b94 	.word	0x08007b94

08005e2c <__retarget_lock_acquire_recursive>:
 8005e2c:	4770      	bx	lr

08005e2e <__retarget_lock_release_recursive>:
 8005e2e:	4770      	bx	lr

08005e30 <_free_r>:
 8005e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e32:	2900      	cmp	r1, #0
 8005e34:	d044      	beq.n	8005ec0 <_free_r+0x90>
 8005e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3a:	9001      	str	r0, [sp, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e42:	bfb8      	it	lt
 8005e44:	18e4      	addlt	r4, r4, r3
 8005e46:	f000 f8df 	bl	8006008 <__malloc_lock>
 8005e4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <_free_r+0x94>)
 8005e4c:	9801      	ldr	r0, [sp, #4]
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	b933      	cbnz	r3, 8005e60 <_free_r+0x30>
 8005e52:	6063      	str	r3, [r4, #4]
 8005e54:	6014      	str	r4, [r2, #0]
 8005e56:	b003      	add	sp, #12
 8005e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e5c:	f000 b8da 	b.w	8006014 <__malloc_unlock>
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d908      	bls.n	8005e76 <_free_r+0x46>
 8005e64:	6825      	ldr	r5, [r4, #0]
 8005e66:	1961      	adds	r1, r4, r5
 8005e68:	428b      	cmp	r3, r1
 8005e6a:	bf01      	itttt	eq
 8005e6c:	6819      	ldreq	r1, [r3, #0]
 8005e6e:	685b      	ldreq	r3, [r3, #4]
 8005e70:	1949      	addeq	r1, r1, r5
 8005e72:	6021      	streq	r1, [r4, #0]
 8005e74:	e7ed      	b.n	8005e52 <_free_r+0x22>
 8005e76:	461a      	mov	r2, r3
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	b10b      	cbz	r3, 8005e80 <_free_r+0x50>
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	d9fa      	bls.n	8005e76 <_free_r+0x46>
 8005e80:	6811      	ldr	r1, [r2, #0]
 8005e82:	1855      	adds	r5, r2, r1
 8005e84:	42a5      	cmp	r5, r4
 8005e86:	d10b      	bne.n	8005ea0 <_free_r+0x70>
 8005e88:	6824      	ldr	r4, [r4, #0]
 8005e8a:	4421      	add	r1, r4
 8005e8c:	1854      	adds	r4, r2, r1
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	6011      	str	r1, [r2, #0]
 8005e92:	d1e0      	bne.n	8005e56 <_free_r+0x26>
 8005e94:	681c      	ldr	r4, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	6053      	str	r3, [r2, #4]
 8005e9a:	440c      	add	r4, r1
 8005e9c:	6014      	str	r4, [r2, #0]
 8005e9e:	e7da      	b.n	8005e56 <_free_r+0x26>
 8005ea0:	d902      	bls.n	8005ea8 <_free_r+0x78>
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	6003      	str	r3, [r0, #0]
 8005ea6:	e7d6      	b.n	8005e56 <_free_r+0x26>
 8005ea8:	6825      	ldr	r5, [r4, #0]
 8005eaa:	1961      	adds	r1, r4, r5
 8005eac:	428b      	cmp	r3, r1
 8005eae:	bf04      	itt	eq
 8005eb0:	6819      	ldreq	r1, [r3, #0]
 8005eb2:	685b      	ldreq	r3, [r3, #4]
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	bf04      	itt	eq
 8005eb8:	1949      	addeq	r1, r1, r5
 8005eba:	6021      	streq	r1, [r4, #0]
 8005ebc:	6054      	str	r4, [r2, #4]
 8005ebe:	e7ca      	b.n	8005e56 <_free_r+0x26>
 8005ec0:	b003      	add	sp, #12
 8005ec2:	bd30      	pop	{r4, r5, pc}
 8005ec4:	200003b8 	.word	0x200003b8

08005ec8 <sbrk_aligned>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4e0e      	ldr	r6, [pc, #56]	; (8005f04 <sbrk_aligned+0x3c>)
 8005ecc:	460c      	mov	r4, r1
 8005ece:	6831      	ldr	r1, [r6, #0]
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	b911      	cbnz	r1, 8005eda <sbrk_aligned+0x12>
 8005ed4:	f000 fba6 	bl	8006624 <_sbrk_r>
 8005ed8:	6030      	str	r0, [r6, #0]
 8005eda:	4621      	mov	r1, r4
 8005edc:	4628      	mov	r0, r5
 8005ede:	f000 fba1 	bl	8006624 <_sbrk_r>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	d00a      	beq.n	8005efc <sbrk_aligned+0x34>
 8005ee6:	1cc4      	adds	r4, r0, #3
 8005ee8:	f024 0403 	bic.w	r4, r4, #3
 8005eec:	42a0      	cmp	r0, r4
 8005eee:	d007      	beq.n	8005f00 <sbrk_aligned+0x38>
 8005ef0:	1a21      	subs	r1, r4, r0
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 fb96 	bl	8006624 <_sbrk_r>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d101      	bne.n	8005f00 <sbrk_aligned+0x38>
 8005efc:	f04f 34ff 	mov.w	r4, #4294967295
 8005f00:	4620      	mov	r0, r4
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	200003bc 	.word	0x200003bc

08005f08 <_malloc_r>:
 8005f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f0c:	1ccd      	adds	r5, r1, #3
 8005f0e:	f025 0503 	bic.w	r5, r5, #3
 8005f12:	3508      	adds	r5, #8
 8005f14:	2d0c      	cmp	r5, #12
 8005f16:	bf38      	it	cc
 8005f18:	250c      	movcc	r5, #12
 8005f1a:	2d00      	cmp	r5, #0
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	db01      	blt.n	8005f24 <_malloc_r+0x1c>
 8005f20:	42a9      	cmp	r1, r5
 8005f22:	d905      	bls.n	8005f30 <_malloc_r+0x28>
 8005f24:	230c      	movs	r3, #12
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	2600      	movs	r6, #0
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006004 <_malloc_r+0xfc>
 8005f34:	f000 f868 	bl	8006008 <__malloc_lock>
 8005f38:	f8d8 3000 	ldr.w	r3, [r8]
 8005f3c:	461c      	mov	r4, r3
 8005f3e:	bb5c      	cbnz	r4, 8005f98 <_malloc_r+0x90>
 8005f40:	4629      	mov	r1, r5
 8005f42:	4638      	mov	r0, r7
 8005f44:	f7ff ffc0 	bl	8005ec8 <sbrk_aligned>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	d155      	bne.n	8005ffa <_malloc_r+0xf2>
 8005f4e:	f8d8 4000 	ldr.w	r4, [r8]
 8005f52:	4626      	mov	r6, r4
 8005f54:	2e00      	cmp	r6, #0
 8005f56:	d145      	bne.n	8005fe4 <_malloc_r+0xdc>
 8005f58:	2c00      	cmp	r4, #0
 8005f5a:	d048      	beq.n	8005fee <_malloc_r+0xe6>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4638      	mov	r0, r7
 8005f62:	eb04 0903 	add.w	r9, r4, r3
 8005f66:	f000 fb5d 	bl	8006624 <_sbrk_r>
 8005f6a:	4581      	cmp	r9, r0
 8005f6c:	d13f      	bne.n	8005fee <_malloc_r+0xe6>
 8005f6e:	6821      	ldr	r1, [r4, #0]
 8005f70:	1a6d      	subs	r5, r5, r1
 8005f72:	4629      	mov	r1, r5
 8005f74:	4638      	mov	r0, r7
 8005f76:	f7ff ffa7 	bl	8005ec8 <sbrk_aligned>
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d037      	beq.n	8005fee <_malloc_r+0xe6>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	442b      	add	r3, r5
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	f8d8 3000 	ldr.w	r3, [r8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d038      	beq.n	8005ffe <_malloc_r+0xf6>
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	42a2      	cmp	r2, r4
 8005f90:	d12b      	bne.n	8005fea <_malloc_r+0xe2>
 8005f92:	2200      	movs	r2, #0
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	e00f      	b.n	8005fb8 <_malloc_r+0xb0>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	1b52      	subs	r2, r2, r5
 8005f9c:	d41f      	bmi.n	8005fde <_malloc_r+0xd6>
 8005f9e:	2a0b      	cmp	r2, #11
 8005fa0:	d917      	bls.n	8005fd2 <_malloc_r+0xca>
 8005fa2:	1961      	adds	r1, r4, r5
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	6025      	str	r5, [r4, #0]
 8005fa8:	bf18      	it	ne
 8005faa:	6059      	strne	r1, [r3, #4]
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	bf08      	it	eq
 8005fb0:	f8c8 1000 	streq.w	r1, [r8]
 8005fb4:	5162      	str	r2, [r4, r5]
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f104 060b 	add.w	r6, r4, #11
 8005fbe:	f000 f829 	bl	8006014 <__malloc_unlock>
 8005fc2:	f026 0607 	bic.w	r6, r6, #7
 8005fc6:	1d23      	adds	r3, r4, #4
 8005fc8:	1af2      	subs	r2, r6, r3
 8005fca:	d0ae      	beq.n	8005f2a <_malloc_r+0x22>
 8005fcc:	1b9b      	subs	r3, r3, r6
 8005fce:	50a3      	str	r3, [r4, r2]
 8005fd0:	e7ab      	b.n	8005f2a <_malloc_r+0x22>
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	6862      	ldr	r2, [r4, #4]
 8005fd6:	d1dd      	bne.n	8005f94 <_malloc_r+0x8c>
 8005fd8:	f8c8 2000 	str.w	r2, [r8]
 8005fdc:	e7ec      	b.n	8005fb8 <_malloc_r+0xb0>
 8005fde:	4623      	mov	r3, r4
 8005fe0:	6864      	ldr	r4, [r4, #4]
 8005fe2:	e7ac      	b.n	8005f3e <_malloc_r+0x36>
 8005fe4:	4634      	mov	r4, r6
 8005fe6:	6876      	ldr	r6, [r6, #4]
 8005fe8:	e7b4      	b.n	8005f54 <_malloc_r+0x4c>
 8005fea:	4613      	mov	r3, r2
 8005fec:	e7cc      	b.n	8005f88 <_malloc_r+0x80>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f000 f80e 	bl	8006014 <__malloc_unlock>
 8005ff8:	e797      	b.n	8005f2a <_malloc_r+0x22>
 8005ffa:	6025      	str	r5, [r4, #0]
 8005ffc:	e7dc      	b.n	8005fb8 <_malloc_r+0xb0>
 8005ffe:	605b      	str	r3, [r3, #4]
 8006000:	deff      	udf	#255	; 0xff
 8006002:	bf00      	nop
 8006004:	200003b8 	.word	0x200003b8

08006008 <__malloc_lock>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__malloc_lock+0x8>)
 800600a:	f7ff bf0f 	b.w	8005e2c <__retarget_lock_acquire_recursive>
 800600e:	bf00      	nop
 8006010:	200003b4 	.word	0x200003b4

08006014 <__malloc_unlock>:
 8006014:	4801      	ldr	r0, [pc, #4]	; (800601c <__malloc_unlock+0x8>)
 8006016:	f7ff bf0a 	b.w	8005e2e <__retarget_lock_release_recursive>
 800601a:	bf00      	nop
 800601c:	200003b4 	.word	0x200003b4

08006020 <__ssputs_r>:
 8006020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	688e      	ldr	r6, [r1, #8]
 8006026:	461f      	mov	r7, r3
 8006028:	42be      	cmp	r6, r7
 800602a:	680b      	ldr	r3, [r1, #0]
 800602c:	4682      	mov	sl, r0
 800602e:	460c      	mov	r4, r1
 8006030:	4690      	mov	r8, r2
 8006032:	d82c      	bhi.n	800608e <__ssputs_r+0x6e>
 8006034:	898a      	ldrh	r2, [r1, #12]
 8006036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800603a:	d026      	beq.n	800608a <__ssputs_r+0x6a>
 800603c:	6965      	ldr	r5, [r4, #20]
 800603e:	6909      	ldr	r1, [r1, #16]
 8006040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006044:	eba3 0901 	sub.w	r9, r3, r1
 8006048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800604c:	1c7b      	adds	r3, r7, #1
 800604e:	444b      	add	r3, r9
 8006050:	106d      	asrs	r5, r5, #1
 8006052:	429d      	cmp	r5, r3
 8006054:	bf38      	it	cc
 8006056:	461d      	movcc	r5, r3
 8006058:	0553      	lsls	r3, r2, #21
 800605a:	d527      	bpl.n	80060ac <__ssputs_r+0x8c>
 800605c:	4629      	mov	r1, r5
 800605e:	f7ff ff53 	bl	8005f08 <_malloc_r>
 8006062:	4606      	mov	r6, r0
 8006064:	b360      	cbz	r0, 80060c0 <__ssputs_r+0xa0>
 8006066:	6921      	ldr	r1, [r4, #16]
 8006068:	464a      	mov	r2, r9
 800606a:	f000 faeb 	bl	8006644 <memcpy>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	6126      	str	r6, [r4, #16]
 800607c:	6165      	str	r5, [r4, #20]
 800607e:	444e      	add	r6, r9
 8006080:	eba5 0509 	sub.w	r5, r5, r9
 8006084:	6026      	str	r6, [r4, #0]
 8006086:	60a5      	str	r5, [r4, #8]
 8006088:	463e      	mov	r6, r7
 800608a:	42be      	cmp	r6, r7
 800608c:	d900      	bls.n	8006090 <__ssputs_r+0x70>
 800608e:	463e      	mov	r6, r7
 8006090:	6820      	ldr	r0, [r4, #0]
 8006092:	4632      	mov	r2, r6
 8006094:	4641      	mov	r1, r8
 8006096:	f000 faab 	bl	80065f0 <memmove>
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	1b9b      	subs	r3, r3, r6
 800609e:	60a3      	str	r3, [r4, #8]
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	4433      	add	r3, r6
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	2000      	movs	r0, #0
 80060a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ac:	462a      	mov	r2, r5
 80060ae:	f000 fad7 	bl	8006660 <_realloc_r>
 80060b2:	4606      	mov	r6, r0
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d1e0      	bne.n	800607a <__ssputs_r+0x5a>
 80060b8:	6921      	ldr	r1, [r4, #16]
 80060ba:	4650      	mov	r0, sl
 80060bc:	f7ff feb8 	bl	8005e30 <_free_r>
 80060c0:	230c      	movs	r3, #12
 80060c2:	f8ca 3000 	str.w	r3, [sl]
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060cc:	81a3      	strh	r3, [r4, #12]
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	e7e9      	b.n	80060a8 <__ssputs_r+0x88>

080060d4 <_svfiprintf_r>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	4698      	mov	r8, r3
 80060da:	898b      	ldrh	r3, [r1, #12]
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	b09d      	sub	sp, #116	; 0x74
 80060e0:	4607      	mov	r7, r0
 80060e2:	460d      	mov	r5, r1
 80060e4:	4614      	mov	r4, r2
 80060e6:	d50e      	bpl.n	8006106 <_svfiprintf_r+0x32>
 80060e8:	690b      	ldr	r3, [r1, #16]
 80060ea:	b963      	cbnz	r3, 8006106 <_svfiprintf_r+0x32>
 80060ec:	2140      	movs	r1, #64	; 0x40
 80060ee:	f7ff ff0b 	bl	8005f08 <_malloc_r>
 80060f2:	6028      	str	r0, [r5, #0]
 80060f4:	6128      	str	r0, [r5, #16]
 80060f6:	b920      	cbnz	r0, 8006102 <_svfiprintf_r+0x2e>
 80060f8:	230c      	movs	r3, #12
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	e0d0      	b.n	80062a4 <_svfiprintf_r+0x1d0>
 8006102:	2340      	movs	r3, #64	; 0x40
 8006104:	616b      	str	r3, [r5, #20]
 8006106:	2300      	movs	r3, #0
 8006108:	9309      	str	r3, [sp, #36]	; 0x24
 800610a:	2320      	movs	r3, #32
 800610c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006110:	f8cd 800c 	str.w	r8, [sp, #12]
 8006114:	2330      	movs	r3, #48	; 0x30
 8006116:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80062bc <_svfiprintf_r+0x1e8>
 800611a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800611e:	f04f 0901 	mov.w	r9, #1
 8006122:	4623      	mov	r3, r4
 8006124:	469a      	mov	sl, r3
 8006126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800612a:	b10a      	cbz	r2, 8006130 <_svfiprintf_r+0x5c>
 800612c:	2a25      	cmp	r2, #37	; 0x25
 800612e:	d1f9      	bne.n	8006124 <_svfiprintf_r+0x50>
 8006130:	ebba 0b04 	subs.w	fp, sl, r4
 8006134:	d00b      	beq.n	800614e <_svfiprintf_r+0x7a>
 8006136:	465b      	mov	r3, fp
 8006138:	4622      	mov	r2, r4
 800613a:	4629      	mov	r1, r5
 800613c:	4638      	mov	r0, r7
 800613e:	f7ff ff6f 	bl	8006020 <__ssputs_r>
 8006142:	3001      	adds	r0, #1
 8006144:	f000 80a9 	beq.w	800629a <_svfiprintf_r+0x1c6>
 8006148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800614a:	445a      	add	r2, fp
 800614c:	9209      	str	r2, [sp, #36]	; 0x24
 800614e:	f89a 3000 	ldrb.w	r3, [sl]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80a1 	beq.w	800629a <_svfiprintf_r+0x1c6>
 8006158:	2300      	movs	r3, #0
 800615a:	f04f 32ff 	mov.w	r2, #4294967295
 800615e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006162:	f10a 0a01 	add.w	sl, sl, #1
 8006166:	9304      	str	r3, [sp, #16]
 8006168:	9307      	str	r3, [sp, #28]
 800616a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800616e:	931a      	str	r3, [sp, #104]	; 0x68
 8006170:	4654      	mov	r4, sl
 8006172:	2205      	movs	r2, #5
 8006174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006178:	4850      	ldr	r0, [pc, #320]	; (80062bc <_svfiprintf_r+0x1e8>)
 800617a:	f7fa f831 	bl	80001e0 <memchr>
 800617e:	9a04      	ldr	r2, [sp, #16]
 8006180:	b9d8      	cbnz	r0, 80061ba <_svfiprintf_r+0xe6>
 8006182:	06d0      	lsls	r0, r2, #27
 8006184:	bf44      	itt	mi
 8006186:	2320      	movmi	r3, #32
 8006188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800618c:	0711      	lsls	r1, r2, #28
 800618e:	bf44      	itt	mi
 8006190:	232b      	movmi	r3, #43	; 0x2b
 8006192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006196:	f89a 3000 	ldrb.w	r3, [sl]
 800619a:	2b2a      	cmp	r3, #42	; 0x2a
 800619c:	d015      	beq.n	80061ca <_svfiprintf_r+0xf6>
 800619e:	9a07      	ldr	r2, [sp, #28]
 80061a0:	4654      	mov	r4, sl
 80061a2:	2000      	movs	r0, #0
 80061a4:	f04f 0c0a 	mov.w	ip, #10
 80061a8:	4621      	mov	r1, r4
 80061aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ae:	3b30      	subs	r3, #48	; 0x30
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d94d      	bls.n	8006250 <_svfiprintf_r+0x17c>
 80061b4:	b1b0      	cbz	r0, 80061e4 <_svfiprintf_r+0x110>
 80061b6:	9207      	str	r2, [sp, #28]
 80061b8:	e014      	b.n	80061e4 <_svfiprintf_r+0x110>
 80061ba:	eba0 0308 	sub.w	r3, r0, r8
 80061be:	fa09 f303 	lsl.w	r3, r9, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	9304      	str	r3, [sp, #16]
 80061c6:	46a2      	mov	sl, r4
 80061c8:	e7d2      	b.n	8006170 <_svfiprintf_r+0x9c>
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	1d19      	adds	r1, r3, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	9103      	str	r1, [sp, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bfbb      	ittet	lt
 80061d6:	425b      	neglt	r3, r3
 80061d8:	f042 0202 	orrlt.w	r2, r2, #2
 80061dc:	9307      	strge	r3, [sp, #28]
 80061de:	9307      	strlt	r3, [sp, #28]
 80061e0:	bfb8      	it	lt
 80061e2:	9204      	strlt	r2, [sp, #16]
 80061e4:	7823      	ldrb	r3, [r4, #0]
 80061e6:	2b2e      	cmp	r3, #46	; 0x2e
 80061e8:	d10c      	bne.n	8006204 <_svfiprintf_r+0x130>
 80061ea:	7863      	ldrb	r3, [r4, #1]
 80061ec:	2b2a      	cmp	r3, #42	; 0x2a
 80061ee:	d134      	bne.n	800625a <_svfiprintf_r+0x186>
 80061f0:	9b03      	ldr	r3, [sp, #12]
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	9203      	str	r2, [sp, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bfb8      	it	lt
 80061fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006200:	3402      	adds	r4, #2
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80062cc <_svfiprintf_r+0x1f8>
 8006208:	7821      	ldrb	r1, [r4, #0]
 800620a:	2203      	movs	r2, #3
 800620c:	4650      	mov	r0, sl
 800620e:	f7f9 ffe7 	bl	80001e0 <memchr>
 8006212:	b138      	cbz	r0, 8006224 <_svfiprintf_r+0x150>
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	eba0 000a 	sub.w	r0, r0, sl
 800621a:	2240      	movs	r2, #64	; 0x40
 800621c:	4082      	lsls	r2, r0
 800621e:	4313      	orrs	r3, r2
 8006220:	3401      	adds	r4, #1
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006228:	4825      	ldr	r0, [pc, #148]	; (80062c0 <_svfiprintf_r+0x1ec>)
 800622a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800622e:	2206      	movs	r2, #6
 8006230:	f7f9 ffd6 	bl	80001e0 <memchr>
 8006234:	2800      	cmp	r0, #0
 8006236:	d038      	beq.n	80062aa <_svfiprintf_r+0x1d6>
 8006238:	4b22      	ldr	r3, [pc, #136]	; (80062c4 <_svfiprintf_r+0x1f0>)
 800623a:	bb1b      	cbnz	r3, 8006284 <_svfiprintf_r+0x1b0>
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	3307      	adds	r3, #7
 8006240:	f023 0307 	bic.w	r3, r3, #7
 8006244:	3308      	adds	r3, #8
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624a:	4433      	add	r3, r6
 800624c:	9309      	str	r3, [sp, #36]	; 0x24
 800624e:	e768      	b.n	8006122 <_svfiprintf_r+0x4e>
 8006250:	fb0c 3202 	mla	r2, ip, r2, r3
 8006254:	460c      	mov	r4, r1
 8006256:	2001      	movs	r0, #1
 8006258:	e7a6      	b.n	80061a8 <_svfiprintf_r+0xd4>
 800625a:	2300      	movs	r3, #0
 800625c:	3401      	adds	r4, #1
 800625e:	9305      	str	r3, [sp, #20]
 8006260:	4619      	mov	r1, r3
 8006262:	f04f 0c0a 	mov.w	ip, #10
 8006266:	4620      	mov	r0, r4
 8006268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800626c:	3a30      	subs	r2, #48	; 0x30
 800626e:	2a09      	cmp	r2, #9
 8006270:	d903      	bls.n	800627a <_svfiprintf_r+0x1a6>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0c6      	beq.n	8006204 <_svfiprintf_r+0x130>
 8006276:	9105      	str	r1, [sp, #20]
 8006278:	e7c4      	b.n	8006204 <_svfiprintf_r+0x130>
 800627a:	fb0c 2101 	mla	r1, ip, r1, r2
 800627e:	4604      	mov	r4, r0
 8006280:	2301      	movs	r3, #1
 8006282:	e7f0      	b.n	8006266 <_svfiprintf_r+0x192>
 8006284:	ab03      	add	r3, sp, #12
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	462a      	mov	r2, r5
 800628a:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <_svfiprintf_r+0x1f4>)
 800628c:	a904      	add	r1, sp, #16
 800628e:	4638      	mov	r0, r7
 8006290:	f3af 8000 	nop.w
 8006294:	1c42      	adds	r2, r0, #1
 8006296:	4606      	mov	r6, r0
 8006298:	d1d6      	bne.n	8006248 <_svfiprintf_r+0x174>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	065b      	lsls	r3, r3, #25
 800629e:	f53f af2d 	bmi.w	80060fc <_svfiprintf_r+0x28>
 80062a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a4:	b01d      	add	sp, #116	; 0x74
 80062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062aa:	ab03      	add	r3, sp, #12
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	462a      	mov	r2, r5
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <_svfiprintf_r+0x1f4>)
 80062b2:	a904      	add	r1, sp, #16
 80062b4:	4638      	mov	r0, r7
 80062b6:	f000 f879 	bl	80063ac <_printf_i>
 80062ba:	e7eb      	b.n	8006294 <_svfiprintf_r+0x1c0>
 80062bc:	08007978 	.word	0x08007978
 80062c0:	08007982 	.word	0x08007982
 80062c4:	00000000 	.word	0x00000000
 80062c8:	08006021 	.word	0x08006021
 80062cc:	0800797e 	.word	0x0800797e

080062d0 <_printf_common>:
 80062d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	4616      	mov	r6, r2
 80062d6:	4699      	mov	r9, r3
 80062d8:	688a      	ldr	r2, [r1, #8]
 80062da:	690b      	ldr	r3, [r1, #16]
 80062dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bfb8      	it	lt
 80062e4:	4613      	movlt	r3, r2
 80062e6:	6033      	str	r3, [r6, #0]
 80062e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062ec:	4607      	mov	r7, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	b10a      	cbz	r2, 80062f6 <_printf_common+0x26>
 80062f2:	3301      	adds	r3, #1
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	0699      	lsls	r1, r3, #26
 80062fa:	bf42      	ittt	mi
 80062fc:	6833      	ldrmi	r3, [r6, #0]
 80062fe:	3302      	addmi	r3, #2
 8006300:	6033      	strmi	r3, [r6, #0]
 8006302:	6825      	ldr	r5, [r4, #0]
 8006304:	f015 0506 	ands.w	r5, r5, #6
 8006308:	d106      	bne.n	8006318 <_printf_common+0x48>
 800630a:	f104 0a19 	add.w	sl, r4, #25
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc26      	bgt.n	8006366 <_printf_common+0x96>
 8006318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800631c:	1e13      	subs	r3, r2, #0
 800631e:	6822      	ldr	r2, [r4, #0]
 8006320:	bf18      	it	ne
 8006322:	2301      	movne	r3, #1
 8006324:	0692      	lsls	r2, r2, #26
 8006326:	d42b      	bmi.n	8006380 <_printf_common+0xb0>
 8006328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800632c:	4649      	mov	r1, r9
 800632e:	4638      	mov	r0, r7
 8006330:	47c0      	blx	r8
 8006332:	3001      	adds	r0, #1
 8006334:	d01e      	beq.n	8006374 <_printf_common+0xa4>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	f003 0306 	and.w	r3, r3, #6
 800633e:	2b04      	cmp	r3, #4
 8006340:	bf02      	ittt	eq
 8006342:	68e5      	ldreq	r5, [r4, #12]
 8006344:	6833      	ldreq	r3, [r6, #0]
 8006346:	1aed      	subeq	r5, r5, r3
 8006348:	68a3      	ldr	r3, [r4, #8]
 800634a:	bf0c      	ite	eq
 800634c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006350:	2500      	movne	r5, #0
 8006352:	4293      	cmp	r3, r2
 8006354:	bfc4      	itt	gt
 8006356:	1a9b      	subgt	r3, r3, r2
 8006358:	18ed      	addgt	r5, r5, r3
 800635a:	2600      	movs	r6, #0
 800635c:	341a      	adds	r4, #26
 800635e:	42b5      	cmp	r5, r6
 8006360:	d11a      	bne.n	8006398 <_printf_common+0xc8>
 8006362:	2000      	movs	r0, #0
 8006364:	e008      	b.n	8006378 <_printf_common+0xa8>
 8006366:	2301      	movs	r3, #1
 8006368:	4652      	mov	r2, sl
 800636a:	4649      	mov	r1, r9
 800636c:	4638      	mov	r0, r7
 800636e:	47c0      	blx	r8
 8006370:	3001      	adds	r0, #1
 8006372:	d103      	bne.n	800637c <_printf_common+0xac>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	3501      	adds	r5, #1
 800637e:	e7c6      	b.n	800630e <_printf_common+0x3e>
 8006380:	18e1      	adds	r1, r4, r3
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	2030      	movs	r0, #48	; 0x30
 8006386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800638a:	4422      	add	r2, r4
 800638c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006394:	3302      	adds	r3, #2
 8006396:	e7c7      	b.n	8006328 <_printf_common+0x58>
 8006398:	2301      	movs	r3, #1
 800639a:	4622      	mov	r2, r4
 800639c:	4649      	mov	r1, r9
 800639e:	4638      	mov	r0, r7
 80063a0:	47c0      	blx	r8
 80063a2:	3001      	adds	r0, #1
 80063a4:	d0e6      	beq.n	8006374 <_printf_common+0xa4>
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7d9      	b.n	800635e <_printf_common+0x8e>
	...

080063ac <_printf_i>:
 80063ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	7e0f      	ldrb	r7, [r1, #24]
 80063b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063b4:	2f78      	cmp	r7, #120	; 0x78
 80063b6:	4691      	mov	r9, r2
 80063b8:	4680      	mov	r8, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	469a      	mov	sl, r3
 80063be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063c2:	d807      	bhi.n	80063d4 <_printf_i+0x28>
 80063c4:	2f62      	cmp	r7, #98	; 0x62
 80063c6:	d80a      	bhi.n	80063de <_printf_i+0x32>
 80063c8:	2f00      	cmp	r7, #0
 80063ca:	f000 80d4 	beq.w	8006576 <_printf_i+0x1ca>
 80063ce:	2f58      	cmp	r7, #88	; 0x58
 80063d0:	f000 80c0 	beq.w	8006554 <_printf_i+0x1a8>
 80063d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063dc:	e03a      	b.n	8006454 <_printf_i+0xa8>
 80063de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063e2:	2b15      	cmp	r3, #21
 80063e4:	d8f6      	bhi.n	80063d4 <_printf_i+0x28>
 80063e6:	a101      	add	r1, pc, #4	; (adr r1, 80063ec <_printf_i+0x40>)
 80063e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006459 	.word	0x08006459
 80063f4:	080063d5 	.word	0x080063d5
 80063f8:	080063d5 	.word	0x080063d5
 80063fc:	080063d5 	.word	0x080063d5
 8006400:	080063d5 	.word	0x080063d5
 8006404:	08006459 	.word	0x08006459
 8006408:	080063d5 	.word	0x080063d5
 800640c:	080063d5 	.word	0x080063d5
 8006410:	080063d5 	.word	0x080063d5
 8006414:	080063d5 	.word	0x080063d5
 8006418:	0800655d 	.word	0x0800655d
 800641c:	08006485 	.word	0x08006485
 8006420:	08006517 	.word	0x08006517
 8006424:	080063d5 	.word	0x080063d5
 8006428:	080063d5 	.word	0x080063d5
 800642c:	0800657f 	.word	0x0800657f
 8006430:	080063d5 	.word	0x080063d5
 8006434:	08006485 	.word	0x08006485
 8006438:	080063d5 	.word	0x080063d5
 800643c:	080063d5 	.word	0x080063d5
 8006440:	0800651f 	.word	0x0800651f
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	602a      	str	r2, [r5, #0]
 800644c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006454:	2301      	movs	r3, #1
 8006456:	e09f      	b.n	8006598 <_printf_i+0x1ec>
 8006458:	6820      	ldr	r0, [r4, #0]
 800645a:	682b      	ldr	r3, [r5, #0]
 800645c:	0607      	lsls	r7, r0, #24
 800645e:	f103 0104 	add.w	r1, r3, #4
 8006462:	6029      	str	r1, [r5, #0]
 8006464:	d501      	bpl.n	800646a <_printf_i+0xbe>
 8006466:	681e      	ldr	r6, [r3, #0]
 8006468:	e003      	b.n	8006472 <_printf_i+0xc6>
 800646a:	0646      	lsls	r6, r0, #25
 800646c:	d5fb      	bpl.n	8006466 <_printf_i+0xba>
 800646e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006472:	2e00      	cmp	r6, #0
 8006474:	da03      	bge.n	800647e <_printf_i+0xd2>
 8006476:	232d      	movs	r3, #45	; 0x2d
 8006478:	4276      	negs	r6, r6
 800647a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647e:	485a      	ldr	r0, [pc, #360]	; (80065e8 <_printf_i+0x23c>)
 8006480:	230a      	movs	r3, #10
 8006482:	e012      	b.n	80064aa <_printf_i+0xfe>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	1d19      	adds	r1, r3, #4
 800648a:	6029      	str	r1, [r5, #0]
 800648c:	0605      	lsls	r5, r0, #24
 800648e:	d501      	bpl.n	8006494 <_printf_i+0xe8>
 8006490:	681e      	ldr	r6, [r3, #0]
 8006492:	e002      	b.n	800649a <_printf_i+0xee>
 8006494:	0641      	lsls	r1, r0, #25
 8006496:	d5fb      	bpl.n	8006490 <_printf_i+0xe4>
 8006498:	881e      	ldrh	r6, [r3, #0]
 800649a:	4853      	ldr	r0, [pc, #332]	; (80065e8 <_printf_i+0x23c>)
 800649c:	2f6f      	cmp	r7, #111	; 0x6f
 800649e:	bf0c      	ite	eq
 80064a0:	2308      	moveq	r3, #8
 80064a2:	230a      	movne	r3, #10
 80064a4:	2100      	movs	r1, #0
 80064a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064aa:	6865      	ldr	r5, [r4, #4]
 80064ac:	60a5      	str	r5, [r4, #8]
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	bfa2      	ittt	ge
 80064b2:	6821      	ldrge	r1, [r4, #0]
 80064b4:	f021 0104 	bicge.w	r1, r1, #4
 80064b8:	6021      	strge	r1, [r4, #0]
 80064ba:	b90e      	cbnz	r6, 80064c0 <_printf_i+0x114>
 80064bc:	2d00      	cmp	r5, #0
 80064be:	d04b      	beq.n	8006558 <_printf_i+0x1ac>
 80064c0:	4615      	mov	r5, r2
 80064c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80064c6:	fb03 6711 	mls	r7, r3, r1, r6
 80064ca:	5dc7      	ldrb	r7, [r0, r7]
 80064cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064d0:	4637      	mov	r7, r6
 80064d2:	42bb      	cmp	r3, r7
 80064d4:	460e      	mov	r6, r1
 80064d6:	d9f4      	bls.n	80064c2 <_printf_i+0x116>
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d10b      	bne.n	80064f4 <_printf_i+0x148>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	07de      	lsls	r6, r3, #31
 80064e0:	d508      	bpl.n	80064f4 <_printf_i+0x148>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	6861      	ldr	r1, [r4, #4]
 80064e6:	4299      	cmp	r1, r3
 80064e8:	bfde      	ittt	le
 80064ea:	2330      	movle	r3, #48	; 0x30
 80064ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064f4:	1b52      	subs	r2, r2, r5
 80064f6:	6122      	str	r2, [r4, #16]
 80064f8:	f8cd a000 	str.w	sl, [sp]
 80064fc:	464b      	mov	r3, r9
 80064fe:	aa03      	add	r2, sp, #12
 8006500:	4621      	mov	r1, r4
 8006502:	4640      	mov	r0, r8
 8006504:	f7ff fee4 	bl	80062d0 <_printf_common>
 8006508:	3001      	adds	r0, #1
 800650a:	d14a      	bne.n	80065a2 <_printf_i+0x1f6>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	b004      	add	sp, #16
 8006512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f043 0320 	orr.w	r3, r3, #32
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	4833      	ldr	r0, [pc, #204]	; (80065ec <_printf_i+0x240>)
 8006520:	2778      	movs	r7, #120	; 0x78
 8006522:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	061f      	lsls	r7, r3, #24
 800652c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006530:	d402      	bmi.n	8006538 <_printf_i+0x18c>
 8006532:	065f      	lsls	r7, r3, #25
 8006534:	bf48      	it	mi
 8006536:	b2b6      	uxthmi	r6, r6
 8006538:	07df      	lsls	r7, r3, #31
 800653a:	bf48      	it	mi
 800653c:	f043 0320 	orrmi.w	r3, r3, #32
 8006540:	6029      	str	r1, [r5, #0]
 8006542:	bf48      	it	mi
 8006544:	6023      	strmi	r3, [r4, #0]
 8006546:	b91e      	cbnz	r6, 8006550 <_printf_i+0x1a4>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	f023 0320 	bic.w	r3, r3, #32
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	2310      	movs	r3, #16
 8006552:	e7a7      	b.n	80064a4 <_printf_i+0xf8>
 8006554:	4824      	ldr	r0, [pc, #144]	; (80065e8 <_printf_i+0x23c>)
 8006556:	e7e4      	b.n	8006522 <_printf_i+0x176>
 8006558:	4615      	mov	r5, r2
 800655a:	e7bd      	b.n	80064d8 <_printf_i+0x12c>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	6826      	ldr	r6, [r4, #0]
 8006560:	6961      	ldr	r1, [r4, #20]
 8006562:	1d18      	adds	r0, r3, #4
 8006564:	6028      	str	r0, [r5, #0]
 8006566:	0635      	lsls	r5, r6, #24
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	d501      	bpl.n	8006570 <_printf_i+0x1c4>
 800656c:	6019      	str	r1, [r3, #0]
 800656e:	e002      	b.n	8006576 <_printf_i+0x1ca>
 8006570:	0670      	lsls	r0, r6, #25
 8006572:	d5fb      	bpl.n	800656c <_printf_i+0x1c0>
 8006574:	8019      	strh	r1, [r3, #0]
 8006576:	2300      	movs	r3, #0
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	4615      	mov	r5, r2
 800657c:	e7bc      	b.n	80064f8 <_printf_i+0x14c>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	1d1a      	adds	r2, r3, #4
 8006582:	602a      	str	r2, [r5, #0]
 8006584:	681d      	ldr	r5, [r3, #0]
 8006586:	6862      	ldr	r2, [r4, #4]
 8006588:	2100      	movs	r1, #0
 800658a:	4628      	mov	r0, r5
 800658c:	f7f9 fe28 	bl	80001e0 <memchr>
 8006590:	b108      	cbz	r0, 8006596 <_printf_i+0x1ea>
 8006592:	1b40      	subs	r0, r0, r5
 8006594:	6060      	str	r0, [r4, #4]
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	2300      	movs	r3, #0
 800659c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a0:	e7aa      	b.n	80064f8 <_printf_i+0x14c>
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	462a      	mov	r2, r5
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	47d0      	blx	sl
 80065ac:	3001      	adds	r0, #1
 80065ae:	d0ad      	beq.n	800650c <_printf_i+0x160>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	079b      	lsls	r3, r3, #30
 80065b4:	d413      	bmi.n	80065de <_printf_i+0x232>
 80065b6:	68e0      	ldr	r0, [r4, #12]
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	4298      	cmp	r0, r3
 80065bc:	bfb8      	it	lt
 80065be:	4618      	movlt	r0, r3
 80065c0:	e7a6      	b.n	8006510 <_printf_i+0x164>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4632      	mov	r2, r6
 80065c6:	4649      	mov	r1, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	47d0      	blx	sl
 80065cc:	3001      	adds	r0, #1
 80065ce:	d09d      	beq.n	800650c <_printf_i+0x160>
 80065d0:	3501      	adds	r5, #1
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	9903      	ldr	r1, [sp, #12]
 80065d6:	1a5b      	subs	r3, r3, r1
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dcf2      	bgt.n	80065c2 <_printf_i+0x216>
 80065dc:	e7eb      	b.n	80065b6 <_printf_i+0x20a>
 80065de:	2500      	movs	r5, #0
 80065e0:	f104 0619 	add.w	r6, r4, #25
 80065e4:	e7f5      	b.n	80065d2 <_printf_i+0x226>
 80065e6:	bf00      	nop
 80065e8:	08007989 	.word	0x08007989
 80065ec:	0800799a 	.word	0x0800799a

080065f0 <memmove>:
 80065f0:	4288      	cmp	r0, r1
 80065f2:	b510      	push	{r4, lr}
 80065f4:	eb01 0402 	add.w	r4, r1, r2
 80065f8:	d902      	bls.n	8006600 <memmove+0x10>
 80065fa:	4284      	cmp	r4, r0
 80065fc:	4623      	mov	r3, r4
 80065fe:	d807      	bhi.n	8006610 <memmove+0x20>
 8006600:	1e43      	subs	r3, r0, #1
 8006602:	42a1      	cmp	r1, r4
 8006604:	d008      	beq.n	8006618 <memmove+0x28>
 8006606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800660a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800660e:	e7f8      	b.n	8006602 <memmove+0x12>
 8006610:	4402      	add	r2, r0
 8006612:	4601      	mov	r1, r0
 8006614:	428a      	cmp	r2, r1
 8006616:	d100      	bne.n	800661a <memmove+0x2a>
 8006618:	bd10      	pop	{r4, pc}
 800661a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800661e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006622:	e7f7      	b.n	8006614 <memmove+0x24>

08006624 <_sbrk_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d06      	ldr	r5, [pc, #24]	; (8006640 <_sbrk_r+0x1c>)
 8006628:	2300      	movs	r3, #0
 800662a:	4604      	mov	r4, r0
 800662c:	4608      	mov	r0, r1
 800662e:	602b      	str	r3, [r5, #0]
 8006630:	f7fb fc90 	bl	8001f54 <_sbrk>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_sbrk_r+0x1a>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_sbrk_r+0x1a>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	200003b0 	.word	0x200003b0

08006644 <memcpy>:
 8006644:	440a      	add	r2, r1
 8006646:	4291      	cmp	r1, r2
 8006648:	f100 33ff 	add.w	r3, r0, #4294967295
 800664c:	d100      	bne.n	8006650 <memcpy+0xc>
 800664e:	4770      	bx	lr
 8006650:	b510      	push	{r4, lr}
 8006652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800665a:	4291      	cmp	r1, r2
 800665c:	d1f9      	bne.n	8006652 <memcpy+0xe>
 800665e:	bd10      	pop	{r4, pc}

08006660 <_realloc_r>:
 8006660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006664:	4680      	mov	r8, r0
 8006666:	4614      	mov	r4, r2
 8006668:	460e      	mov	r6, r1
 800666a:	b921      	cbnz	r1, 8006676 <_realloc_r+0x16>
 800666c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006670:	4611      	mov	r1, r2
 8006672:	f7ff bc49 	b.w	8005f08 <_malloc_r>
 8006676:	b92a      	cbnz	r2, 8006684 <_realloc_r+0x24>
 8006678:	f7ff fbda 	bl	8005e30 <_free_r>
 800667c:	4625      	mov	r5, r4
 800667e:	4628      	mov	r0, r5
 8006680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006684:	f000 f81b 	bl	80066be <_malloc_usable_size_r>
 8006688:	4284      	cmp	r4, r0
 800668a:	4607      	mov	r7, r0
 800668c:	d802      	bhi.n	8006694 <_realloc_r+0x34>
 800668e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006692:	d812      	bhi.n	80066ba <_realloc_r+0x5a>
 8006694:	4621      	mov	r1, r4
 8006696:	4640      	mov	r0, r8
 8006698:	f7ff fc36 	bl	8005f08 <_malloc_r>
 800669c:	4605      	mov	r5, r0
 800669e:	2800      	cmp	r0, #0
 80066a0:	d0ed      	beq.n	800667e <_realloc_r+0x1e>
 80066a2:	42bc      	cmp	r4, r7
 80066a4:	4622      	mov	r2, r4
 80066a6:	4631      	mov	r1, r6
 80066a8:	bf28      	it	cs
 80066aa:	463a      	movcs	r2, r7
 80066ac:	f7ff ffca 	bl	8006644 <memcpy>
 80066b0:	4631      	mov	r1, r6
 80066b2:	4640      	mov	r0, r8
 80066b4:	f7ff fbbc 	bl	8005e30 <_free_r>
 80066b8:	e7e1      	b.n	800667e <_realloc_r+0x1e>
 80066ba:	4635      	mov	r5, r6
 80066bc:	e7df      	b.n	800667e <_realloc_r+0x1e>

080066be <_malloc_usable_size_r>:
 80066be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c2:	1f18      	subs	r0, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bfbc      	itt	lt
 80066c8:	580b      	ldrlt	r3, [r1, r0]
 80066ca:	18c0      	addlt	r0, r0, r3
 80066cc:	4770      	bx	lr
	...

080066d0 <tan>:
 80066d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066d2:	ec53 2b10 	vmov	r2, r3, d0
 80066d6:	4816      	ldr	r0, [pc, #88]	; (8006730 <tan+0x60>)
 80066d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80066dc:	4281      	cmp	r1, r0
 80066de:	dc07      	bgt.n	80066f0 <tan+0x20>
 80066e0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006728 <tan+0x58>
 80066e4:	2001      	movs	r0, #1
 80066e6:	b005      	add	sp, #20
 80066e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ec:	f000 b824 	b.w	8006738 <__kernel_tan>
 80066f0:	4810      	ldr	r0, [pc, #64]	; (8006734 <tan+0x64>)
 80066f2:	4281      	cmp	r1, r0
 80066f4:	dd09      	ble.n	800670a <tan+0x3a>
 80066f6:	ee10 0a10 	vmov	r0, s0
 80066fa:	4619      	mov	r1, r3
 80066fc:	f7f9 fdc4 	bl	8000288 <__aeabi_dsub>
 8006700:	ec41 0b10 	vmov	d0, r0, r1
 8006704:	b005      	add	sp, #20
 8006706:	f85d fb04 	ldr.w	pc, [sp], #4
 800670a:	4668      	mov	r0, sp
 800670c:	f000 fa20 	bl	8006b50 <__ieee754_rem_pio2>
 8006710:	0040      	lsls	r0, r0, #1
 8006712:	f000 0002 	and.w	r0, r0, #2
 8006716:	ed9d 1b02 	vldr	d1, [sp, #8]
 800671a:	ed9d 0b00 	vldr	d0, [sp]
 800671e:	f1c0 0001 	rsb	r0, r0, #1
 8006722:	f000 f809 	bl	8006738 <__kernel_tan>
 8006726:	e7ed      	b.n	8006704 <tan+0x34>
	...
 8006730:	3fe921fb 	.word	0x3fe921fb
 8006734:	7fefffff 	.word	0x7fefffff

08006738 <__kernel_tan>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	ed2d 8b06 	vpush	{d8-d10}
 8006740:	ec5b ab10 	vmov	sl, fp, d0
 8006744:	4be0      	ldr	r3, [pc, #896]	; (8006ac8 <__kernel_tan+0x390>)
 8006746:	b083      	sub	sp, #12
 8006748:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800674c:	429f      	cmp	r7, r3
 800674e:	ec59 8b11 	vmov	r8, r9, d1
 8006752:	4606      	mov	r6, r0
 8006754:	f8cd b000 	str.w	fp, [sp]
 8006758:	dc61      	bgt.n	800681e <__kernel_tan+0xe6>
 800675a:	ee10 0a10 	vmov	r0, s0
 800675e:	4659      	mov	r1, fp
 8006760:	f7fa f9e4 	bl	8000b2c <__aeabi_d2iz>
 8006764:	4605      	mov	r5, r0
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 8083 	bne.w	8006872 <__kernel_tan+0x13a>
 800676c:	1c73      	adds	r3, r6, #1
 800676e:	4652      	mov	r2, sl
 8006770:	4313      	orrs	r3, r2
 8006772:	433b      	orrs	r3, r7
 8006774:	d112      	bne.n	800679c <__kernel_tan+0x64>
 8006776:	ec4b ab10 	vmov	d0, sl, fp
 800677a:	f000 fbef 	bl	8006f5c <fabs>
 800677e:	49d3      	ldr	r1, [pc, #844]	; (8006acc <__kernel_tan+0x394>)
 8006780:	ec53 2b10 	vmov	r2, r3, d0
 8006784:	2000      	movs	r0, #0
 8006786:	f7fa f861 	bl	800084c <__aeabi_ddiv>
 800678a:	4682      	mov	sl, r0
 800678c:	468b      	mov	fp, r1
 800678e:	ec4b ab10 	vmov	d0, sl, fp
 8006792:	b003      	add	sp, #12
 8006794:	ecbd 8b06 	vpop	{d8-d10}
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	2e01      	cmp	r6, #1
 800679e:	d0f6      	beq.n	800678e <__kernel_tan+0x56>
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	4650      	mov	r0, sl
 80067a6:	4659      	mov	r1, fp
 80067a8:	f7f9 fd70 	bl	800028c <__adddf3>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	460f      	mov	r7, r1
 80067b2:	2000      	movs	r0, #0
 80067b4:	49c6      	ldr	r1, [pc, #792]	; (8006ad0 <__kernel_tan+0x398>)
 80067b6:	f7fa f849 	bl	800084c <__aeabi_ddiv>
 80067ba:	e9cd 0100 	strd	r0, r1, [sp]
 80067be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067c2:	462e      	mov	r6, r5
 80067c4:	4652      	mov	r2, sl
 80067c6:	462c      	mov	r4, r5
 80067c8:	4630      	mov	r0, r6
 80067ca:	461d      	mov	r5, r3
 80067cc:	4639      	mov	r1, r7
 80067ce:	465b      	mov	r3, fp
 80067d0:	f7f9 fd5a 	bl	8000288 <__aeabi_dsub>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	f7f9 fd54 	bl	8000288 <__aeabi_dsub>
 80067e0:	4632      	mov	r2, r6
 80067e2:	462b      	mov	r3, r5
 80067e4:	f7f9 ff08 	bl	80005f8 <__aeabi_dmul>
 80067e8:	4632      	mov	r2, r6
 80067ea:	4680      	mov	r8, r0
 80067ec:	4689      	mov	r9, r1
 80067ee:	462b      	mov	r3, r5
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 ff00 	bl	80005f8 <__aeabi_dmul>
 80067f8:	4bb4      	ldr	r3, [pc, #720]	; (8006acc <__kernel_tan+0x394>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	f7f9 fd46 	bl	800028c <__adddf3>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4640      	mov	r0, r8
 8006806:	4649      	mov	r1, r9
 8006808:	f7f9 fd40 	bl	800028c <__adddf3>
 800680c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006810:	f7f9 fef2 	bl	80005f8 <__aeabi_dmul>
 8006814:	4622      	mov	r2, r4
 8006816:	462b      	mov	r3, r5
 8006818:	f7f9 fd38 	bl	800028c <__adddf3>
 800681c:	e7b5      	b.n	800678a <__kernel_tan+0x52>
 800681e:	4bad      	ldr	r3, [pc, #692]	; (8006ad4 <__kernel_tan+0x39c>)
 8006820:	429f      	cmp	r7, r3
 8006822:	dd26      	ble.n	8006872 <__kernel_tan+0x13a>
 8006824:	9b00      	ldr	r3, [sp, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	da09      	bge.n	800683e <__kernel_tan+0x106>
 800682a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800682e:	469b      	mov	fp, r3
 8006830:	ee10 aa10 	vmov	sl, s0
 8006834:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006838:	ee11 8a10 	vmov	r8, s2
 800683c:	4699      	mov	r9, r3
 800683e:	4652      	mov	r2, sl
 8006840:	465b      	mov	r3, fp
 8006842:	a183      	add	r1, pc, #524	; (adr r1, 8006a50 <__kernel_tan+0x318>)
 8006844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006848:	f7f9 fd1e 	bl	8000288 <__aeabi_dsub>
 800684c:	4642      	mov	r2, r8
 800684e:	464b      	mov	r3, r9
 8006850:	4604      	mov	r4, r0
 8006852:	460d      	mov	r5, r1
 8006854:	a180      	add	r1, pc, #512	; (adr r1, 8006a58 <__kernel_tan+0x320>)
 8006856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800685a:	f7f9 fd15 	bl	8000288 <__aeabi_dsub>
 800685e:	4622      	mov	r2, r4
 8006860:	462b      	mov	r3, r5
 8006862:	f7f9 fd13 	bl	800028c <__adddf3>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	4682      	mov	sl, r0
 800686c:	468b      	mov	fp, r1
 800686e:	f04f 0900 	mov.w	r9, #0
 8006872:	4652      	mov	r2, sl
 8006874:	465b      	mov	r3, fp
 8006876:	4650      	mov	r0, sl
 8006878:	4659      	mov	r1, fp
 800687a:	f7f9 febd 	bl	80005f8 <__aeabi_dmul>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	ec43 2b18 	vmov	d8, r2, r3
 8006886:	f7f9 feb7 	bl	80005f8 <__aeabi_dmul>
 800688a:	ec53 2b18 	vmov	r2, r3, d8
 800688e:	4604      	mov	r4, r0
 8006890:	460d      	mov	r5, r1
 8006892:	4650      	mov	r0, sl
 8006894:	4659      	mov	r1, fp
 8006896:	f7f9 feaf 	bl	80005f8 <__aeabi_dmul>
 800689a:	a371      	add	r3, pc, #452	; (adr r3, 8006a60 <__kernel_tan+0x328>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	ec41 0b19 	vmov	d9, r0, r1
 80068a4:	4620      	mov	r0, r4
 80068a6:	4629      	mov	r1, r5
 80068a8:	f7f9 fea6 	bl	80005f8 <__aeabi_dmul>
 80068ac:	a36e      	add	r3, pc, #440	; (adr r3, 8006a68 <__kernel_tan+0x330>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f7f9 fceb 	bl	800028c <__adddf3>
 80068b6:	4622      	mov	r2, r4
 80068b8:	462b      	mov	r3, r5
 80068ba:	f7f9 fe9d 	bl	80005f8 <__aeabi_dmul>
 80068be:	a36c      	add	r3, pc, #432	; (adr r3, 8006a70 <__kernel_tan+0x338>)
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f7f9 fce2 	bl	800028c <__adddf3>
 80068c8:	4622      	mov	r2, r4
 80068ca:	462b      	mov	r3, r5
 80068cc:	f7f9 fe94 	bl	80005f8 <__aeabi_dmul>
 80068d0:	a369      	add	r3, pc, #420	; (adr r3, 8006a78 <__kernel_tan+0x340>)
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f7f9 fcd9 	bl	800028c <__adddf3>
 80068da:	4622      	mov	r2, r4
 80068dc:	462b      	mov	r3, r5
 80068de:	f7f9 fe8b 	bl	80005f8 <__aeabi_dmul>
 80068e2:	a367      	add	r3, pc, #412	; (adr r3, 8006a80 <__kernel_tan+0x348>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f7f9 fcd0 	bl	800028c <__adddf3>
 80068ec:	4622      	mov	r2, r4
 80068ee:	462b      	mov	r3, r5
 80068f0:	f7f9 fe82 	bl	80005f8 <__aeabi_dmul>
 80068f4:	a364      	add	r3, pc, #400	; (adr r3, 8006a88 <__kernel_tan+0x350>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	f7f9 fcc7 	bl	800028c <__adddf3>
 80068fe:	ec53 2b18 	vmov	r2, r3, d8
 8006902:	f7f9 fe79 	bl	80005f8 <__aeabi_dmul>
 8006906:	a362      	add	r3, pc, #392	; (adr r3, 8006a90 <__kernel_tan+0x358>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	ec41 0b1a 	vmov	d10, r0, r1
 8006910:	4620      	mov	r0, r4
 8006912:	4629      	mov	r1, r5
 8006914:	f7f9 fe70 	bl	80005f8 <__aeabi_dmul>
 8006918:	a35f      	add	r3, pc, #380	; (adr r3, 8006a98 <__kernel_tan+0x360>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f7f9 fcb5 	bl	800028c <__adddf3>
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	f7f9 fe67 	bl	80005f8 <__aeabi_dmul>
 800692a:	a35d      	add	r3, pc, #372	; (adr r3, 8006aa0 <__kernel_tan+0x368>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fcac 	bl	800028c <__adddf3>
 8006934:	4622      	mov	r2, r4
 8006936:	462b      	mov	r3, r5
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	a35a      	add	r3, pc, #360	; (adr r3, 8006aa8 <__kernel_tan+0x370>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f7f9 fca3 	bl	800028c <__adddf3>
 8006946:	4622      	mov	r2, r4
 8006948:	462b      	mov	r3, r5
 800694a:	f7f9 fe55 	bl	80005f8 <__aeabi_dmul>
 800694e:	a358      	add	r3, pc, #352	; (adr r3, 8006ab0 <__kernel_tan+0x378>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f7f9 fc9a 	bl	800028c <__adddf3>
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	f7f9 fe4c 	bl	80005f8 <__aeabi_dmul>
 8006960:	a355      	add	r3, pc, #340	; (adr r3, 8006ab8 <__kernel_tan+0x380>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f7f9 fc91 	bl	800028c <__adddf3>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	ec51 0b1a 	vmov	r0, r1, d10
 8006972:	f7f9 fc8b 	bl	800028c <__adddf3>
 8006976:	ec53 2b19 	vmov	r2, r3, d9
 800697a:	f7f9 fe3d 	bl	80005f8 <__aeabi_dmul>
 800697e:	4642      	mov	r2, r8
 8006980:	464b      	mov	r3, r9
 8006982:	f7f9 fc83 	bl	800028c <__adddf3>
 8006986:	ec53 2b18 	vmov	r2, r3, d8
 800698a:	f7f9 fe35 	bl	80005f8 <__aeabi_dmul>
 800698e:	4642      	mov	r2, r8
 8006990:	464b      	mov	r3, r9
 8006992:	f7f9 fc7b 	bl	800028c <__adddf3>
 8006996:	a34a      	add	r3, pc, #296	; (adr r3, 8006ac0 <__kernel_tan+0x388>)
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	4604      	mov	r4, r0
 800699e:	460d      	mov	r5, r1
 80069a0:	ec51 0b19 	vmov	r0, r1, d9
 80069a4:	f7f9 fe28 	bl	80005f8 <__aeabi_dmul>
 80069a8:	4622      	mov	r2, r4
 80069aa:	462b      	mov	r3, r5
 80069ac:	f7f9 fc6e 	bl	800028c <__adddf3>
 80069b0:	460b      	mov	r3, r1
 80069b2:	ec41 0b18 	vmov	d8, r0, r1
 80069b6:	4602      	mov	r2, r0
 80069b8:	4659      	mov	r1, fp
 80069ba:	4650      	mov	r0, sl
 80069bc:	f7f9 fc66 	bl	800028c <__adddf3>
 80069c0:	4b44      	ldr	r3, [pc, #272]	; (8006ad4 <__kernel_tan+0x39c>)
 80069c2:	429f      	cmp	r7, r3
 80069c4:	4604      	mov	r4, r0
 80069c6:	460d      	mov	r5, r1
 80069c8:	f340 8086 	ble.w	8006ad8 <__kernel_tan+0x3a0>
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7f9 fda9 	bl	8000524 <__aeabi_i2d>
 80069d2:	4622      	mov	r2, r4
 80069d4:	4680      	mov	r8, r0
 80069d6:	4689      	mov	r9, r1
 80069d8:	462b      	mov	r3, r5
 80069da:	4620      	mov	r0, r4
 80069dc:	4629      	mov	r1, r5
 80069de:	f7f9 fe0b 	bl	80005f8 <__aeabi_dmul>
 80069e2:	4642      	mov	r2, r8
 80069e4:	4606      	mov	r6, r0
 80069e6:	460f      	mov	r7, r1
 80069e8:	464b      	mov	r3, r9
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7f9 fc4d 	bl	800028c <__adddf3>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4630      	mov	r0, r6
 80069f8:	4639      	mov	r1, r7
 80069fa:	f7f9 ff27 	bl	800084c <__aeabi_ddiv>
 80069fe:	ec53 2b18 	vmov	r2, r3, d8
 8006a02:	f7f9 fc41 	bl	8000288 <__aeabi_dsub>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	f7f9 fc3b 	bl	8000288 <__aeabi_dsub>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	f7f9 fc39 	bl	800028c <__adddf3>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7f9 fc31 	bl	8000288 <__aeabi_dsub>
 8006a26:	9b00      	ldr	r3, [sp, #0]
 8006a28:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8006a2c:	f00a 0a02 	and.w	sl, sl, #2
 8006a30:	4604      	mov	r4, r0
 8006a32:	f1ca 0001 	rsb	r0, sl, #1
 8006a36:	460d      	mov	r5, r1
 8006a38:	f7f9 fd74 	bl	8000524 <__aeabi_i2d>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 fdd8 	bl	80005f8 <__aeabi_dmul>
 8006a48:	e69f      	b.n	800678a <__kernel_tan+0x52>
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w
 8006a50:	54442d18 	.word	0x54442d18
 8006a54:	3fe921fb 	.word	0x3fe921fb
 8006a58:	33145c07 	.word	0x33145c07
 8006a5c:	3c81a626 	.word	0x3c81a626
 8006a60:	74bf7ad4 	.word	0x74bf7ad4
 8006a64:	3efb2a70 	.word	0x3efb2a70
 8006a68:	32f0a7e9 	.word	0x32f0a7e9
 8006a6c:	3f12b80f 	.word	0x3f12b80f
 8006a70:	1a8d1068 	.word	0x1a8d1068
 8006a74:	3f3026f7 	.word	0x3f3026f7
 8006a78:	fee08315 	.word	0xfee08315
 8006a7c:	3f57dbc8 	.word	0x3f57dbc8
 8006a80:	e96e8493 	.word	0xe96e8493
 8006a84:	3f8226e3 	.word	0x3f8226e3
 8006a88:	1bb341fe 	.word	0x1bb341fe
 8006a8c:	3faba1ba 	.word	0x3faba1ba
 8006a90:	db605373 	.word	0xdb605373
 8006a94:	bef375cb 	.word	0xbef375cb
 8006a98:	a03792a6 	.word	0xa03792a6
 8006a9c:	3f147e88 	.word	0x3f147e88
 8006aa0:	f2f26501 	.word	0xf2f26501
 8006aa4:	3f4344d8 	.word	0x3f4344d8
 8006aa8:	c9560328 	.word	0xc9560328
 8006aac:	3f6d6d22 	.word	0x3f6d6d22
 8006ab0:	8406d637 	.word	0x8406d637
 8006ab4:	3f9664f4 	.word	0x3f9664f4
 8006ab8:	1110fe7a 	.word	0x1110fe7a
 8006abc:	3fc11111 	.word	0x3fc11111
 8006ac0:	55555563 	.word	0x55555563
 8006ac4:	3fd55555 	.word	0x3fd55555
 8006ac8:	3e2fffff 	.word	0x3e2fffff
 8006acc:	3ff00000 	.word	0x3ff00000
 8006ad0:	bff00000 	.word	0xbff00000
 8006ad4:	3fe59427 	.word	0x3fe59427
 8006ad8:	2e01      	cmp	r6, #1
 8006ada:	d02f      	beq.n	8006b3c <__kernel_tan+0x404>
 8006adc:	460f      	mov	r7, r1
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4689      	mov	r9, r1
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	4917      	ldr	r1, [pc, #92]	; (8006b44 <__kernel_tan+0x40c>)
 8006ae8:	f7f9 feb0 	bl	800084c <__aeabi_ddiv>
 8006aec:	2600      	movs	r6, #0
 8006aee:	e9cd 0100 	strd	r0, r1, [sp]
 8006af2:	4652      	mov	r2, sl
 8006af4:	465b      	mov	r3, fp
 8006af6:	4630      	mov	r0, r6
 8006af8:	4639      	mov	r1, r7
 8006afa:	f7f9 fbc5 	bl	8000288 <__aeabi_dsub>
 8006afe:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	ec51 0b18 	vmov	r0, r1, d8
 8006b0a:	f7f9 fbbd 	bl	8000288 <__aeabi_dsub>
 8006b0e:	4632      	mov	r2, r6
 8006b10:	462b      	mov	r3, r5
 8006b12:	f7f9 fd71 	bl	80005f8 <__aeabi_dmul>
 8006b16:	46b0      	mov	r8, r6
 8006b18:	460f      	mov	r7, r1
 8006b1a:	4642      	mov	r2, r8
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	4634      	mov	r4, r6
 8006b20:	4649      	mov	r1, r9
 8006b22:	4606      	mov	r6, r0
 8006b24:	4640      	mov	r0, r8
 8006b26:	f7f9 fd67 	bl	80005f8 <__aeabi_dmul>
 8006b2a:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <__kernel_tan+0x410>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f7f9 fbad 	bl	800028c <__adddf3>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4630      	mov	r0, r6
 8006b38:	4639      	mov	r1, r7
 8006b3a:	e665      	b.n	8006808 <__kernel_tan+0xd0>
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	468b      	mov	fp, r1
 8006b40:	e625      	b.n	800678e <__kernel_tan+0x56>
 8006b42:	bf00      	nop
 8006b44:	bff00000 	.word	0xbff00000
 8006b48:	3ff00000 	.word	0x3ff00000
 8006b4c:	00000000 	.word	0x00000000

08006b50 <__ieee754_rem_pio2>:
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	ed2d 8b02 	vpush	{d8}
 8006b58:	ec55 4b10 	vmov	r4, r5, d0
 8006b5c:	4bca      	ldr	r3, [pc, #808]	; (8006e88 <__ieee754_rem_pio2+0x338>)
 8006b5e:	b08b      	sub	sp, #44	; 0x2c
 8006b60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006b64:	4598      	cmp	r8, r3
 8006b66:	4682      	mov	sl, r0
 8006b68:	9502      	str	r5, [sp, #8]
 8006b6a:	dc08      	bgt.n	8006b7e <__ieee754_rem_pio2+0x2e>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2300      	movs	r3, #0
 8006b70:	ed80 0b00 	vstr	d0, [r0]
 8006b74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006b78:	f04f 0b00 	mov.w	fp, #0
 8006b7c:	e028      	b.n	8006bd0 <__ieee754_rem_pio2+0x80>
 8006b7e:	4bc3      	ldr	r3, [pc, #780]	; (8006e8c <__ieee754_rem_pio2+0x33c>)
 8006b80:	4598      	cmp	r8, r3
 8006b82:	dc78      	bgt.n	8006c76 <__ieee754_rem_pio2+0x126>
 8006b84:	9b02      	ldr	r3, [sp, #8]
 8006b86:	4ec2      	ldr	r6, [pc, #776]	; (8006e90 <__ieee754_rem_pio2+0x340>)
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	ee10 0a10 	vmov	r0, s0
 8006b8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006e50 <__ieee754_rem_pio2+0x300>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	4629      	mov	r1, r5
 8006b96:	dd39      	ble.n	8006c0c <__ieee754_rem_pio2+0xbc>
 8006b98:	f7f9 fb76 	bl	8000288 <__aeabi_dsub>
 8006b9c:	45b0      	cmp	r8, r6
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	460d      	mov	r5, r1
 8006ba2:	d01b      	beq.n	8006bdc <__ieee754_rem_pio2+0x8c>
 8006ba4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006e58 <__ieee754_rem_pio2+0x308>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f7f9 fb6d 	bl	8000288 <__aeabi_dsub>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	e9ca 2300 	strd	r2, r3, [sl]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 fb65 	bl	8000288 <__aeabi_dsub>
 8006bbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8006e58 <__ieee754_rem_pio2+0x308>)
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f7f9 fb60 	bl	8000288 <__aeabi_dsub>
 8006bc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006bcc:	f04f 0b01 	mov.w	fp, #1
 8006bd0:	4658      	mov	r0, fp
 8006bd2:	b00b      	add	sp, #44	; 0x2c
 8006bd4:	ecbd 8b02 	vpop	{d8}
 8006bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bdc:	a3a0      	add	r3, pc, #640	; (adr r3, 8006e60 <__ieee754_rem_pio2+0x310>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fb51 	bl	8000288 <__aeabi_dsub>
 8006be6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006e68 <__ieee754_rem_pio2+0x318>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	f7f9 fb4a 	bl	8000288 <__aeabi_dsub>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	e9ca 2300 	strd	r2, r3, [sl]
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f7f9 fb42 	bl	8000288 <__aeabi_dsub>
 8006c04:	a398      	add	r3, pc, #608	; (adr r3, 8006e68 <__ieee754_rem_pio2+0x318>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	e7db      	b.n	8006bc4 <__ieee754_rem_pio2+0x74>
 8006c0c:	f7f9 fb3e 	bl	800028c <__adddf3>
 8006c10:	45b0      	cmp	r8, r6
 8006c12:	4604      	mov	r4, r0
 8006c14:	460d      	mov	r5, r1
 8006c16:	d016      	beq.n	8006c46 <__ieee754_rem_pio2+0xf6>
 8006c18:	a38f      	add	r3, pc, #572	; (adr r3, 8006e58 <__ieee754_rem_pio2+0x308>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f7f9 fb35 	bl	800028c <__adddf3>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	e9ca 2300 	strd	r2, r3, [sl]
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 fb2b 	bl	8000288 <__aeabi_dsub>
 8006c32:	a389      	add	r3, pc, #548	; (adr r3, 8006e58 <__ieee754_rem_pio2+0x308>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fb28 	bl	800028c <__adddf3>
 8006c3c:	f04f 3bff 	mov.w	fp, #4294967295
 8006c40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c44:	e7c4      	b.n	8006bd0 <__ieee754_rem_pio2+0x80>
 8006c46:	a386      	add	r3, pc, #536	; (adr r3, 8006e60 <__ieee754_rem_pio2+0x310>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fb1e 	bl	800028c <__adddf3>
 8006c50:	a385      	add	r3, pc, #532	; (adr r3, 8006e68 <__ieee754_rem_pio2+0x318>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	4604      	mov	r4, r0
 8006c58:	460d      	mov	r5, r1
 8006c5a:	f7f9 fb17 	bl	800028c <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	e9ca 2300 	strd	r2, r3, [sl]
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7f9 fb0d 	bl	8000288 <__aeabi_dsub>
 8006c6e:	a37e      	add	r3, pc, #504	; (adr r3, 8006e68 <__ieee754_rem_pio2+0x318>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	e7e0      	b.n	8006c38 <__ieee754_rem_pio2+0xe8>
 8006c76:	4b87      	ldr	r3, [pc, #540]	; (8006e94 <__ieee754_rem_pio2+0x344>)
 8006c78:	4598      	cmp	r8, r3
 8006c7a:	f300 80d8 	bgt.w	8006e2e <__ieee754_rem_pio2+0x2de>
 8006c7e:	f000 f96d 	bl	8006f5c <fabs>
 8006c82:	ec55 4b10 	vmov	r4, r5, d0
 8006c86:	ee10 0a10 	vmov	r0, s0
 8006c8a:	a379      	add	r3, pc, #484	; (adr r3, 8006e70 <__ieee754_rem_pio2+0x320>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 fcb1 	bl	80005f8 <__aeabi_dmul>
 8006c96:	4b80      	ldr	r3, [pc, #512]	; (8006e98 <__ieee754_rem_pio2+0x348>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f7f9 faf7 	bl	800028c <__adddf3>
 8006c9e:	f7f9 ff45 	bl	8000b2c <__aeabi_d2iz>
 8006ca2:	4683      	mov	fp, r0
 8006ca4:	f7f9 fc3e 	bl	8000524 <__aeabi_i2d>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	ec43 2b18 	vmov	d8, r2, r3
 8006cb0:	a367      	add	r3, pc, #412	; (adr r3, 8006e50 <__ieee754_rem_pio2+0x300>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f7f9 fc9f 	bl	80005f8 <__aeabi_dmul>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	f7f9 fae1 	bl	8000288 <__aeabi_dsub>
 8006cc6:	a364      	add	r3, pc, #400	; (adr r3, 8006e58 <__ieee754_rem_pio2+0x308>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	4606      	mov	r6, r0
 8006cce:	460f      	mov	r7, r1
 8006cd0:	ec51 0b18 	vmov	r0, r1, d8
 8006cd4:	f7f9 fc90 	bl	80005f8 <__aeabi_dmul>
 8006cd8:	f1bb 0f1f 	cmp.w	fp, #31
 8006cdc:	4604      	mov	r4, r0
 8006cde:	460d      	mov	r5, r1
 8006ce0:	dc0d      	bgt.n	8006cfe <__ieee754_rem_pio2+0x1ae>
 8006ce2:	4b6e      	ldr	r3, [pc, #440]	; (8006e9c <__ieee754_rem_pio2+0x34c>)
 8006ce4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	4543      	cmp	r3, r8
 8006cee:	d006      	beq.n	8006cfe <__ieee754_rem_pio2+0x1ae>
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 fac6 	bl	8000288 <__aeabi_dsub>
 8006cfc:	e00e      	b.n	8006d1c <__ieee754_rem_pio2+0x1cc>
 8006cfe:	462b      	mov	r3, r5
 8006d00:	4622      	mov	r2, r4
 8006d02:	4630      	mov	r0, r6
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7f9 fabf 	bl	8000288 <__aeabi_dsub>
 8006d0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d14:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	dc02      	bgt.n	8006d22 <__ieee754_rem_pio2+0x1d2>
 8006d1c:	e9ca 0100 	strd	r0, r1, [sl]
 8006d20:	e039      	b.n	8006d96 <__ieee754_rem_pio2+0x246>
 8006d22:	a34f      	add	r3, pc, #316	; (adr r3, 8006e60 <__ieee754_rem_pio2+0x310>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	ec51 0b18 	vmov	r0, r1, d8
 8006d2c:	f7f9 fc64 	bl	80005f8 <__aeabi_dmul>
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7f9 faa4 	bl	8000288 <__aeabi_dsub>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4680      	mov	r8, r0
 8006d46:	4689      	mov	r9, r1
 8006d48:	4630      	mov	r0, r6
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	f7f9 fa9c 	bl	8000288 <__aeabi_dsub>
 8006d50:	4622      	mov	r2, r4
 8006d52:	462b      	mov	r3, r5
 8006d54:	f7f9 fa98 	bl	8000288 <__aeabi_dsub>
 8006d58:	a343      	add	r3, pc, #268	; (adr r3, 8006e68 <__ieee754_rem_pio2+0x318>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	4604      	mov	r4, r0
 8006d60:	460d      	mov	r5, r1
 8006d62:	ec51 0b18 	vmov	r0, r1, d8
 8006d66:	f7f9 fc47 	bl	80005f8 <__aeabi_dmul>
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	f7f9 fa8b 	bl	8000288 <__aeabi_dsub>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4604      	mov	r4, r0
 8006d78:	460d      	mov	r5, r1
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	f7f9 fa83 	bl	8000288 <__aeabi_dsub>
 8006d82:	9a03      	ldr	r2, [sp, #12]
 8006d84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b31      	cmp	r3, #49	; 0x31
 8006d8c:	dc24      	bgt.n	8006dd8 <__ieee754_rem_pio2+0x288>
 8006d8e:	e9ca 0100 	strd	r0, r1, [sl]
 8006d92:	4646      	mov	r6, r8
 8006d94:	464f      	mov	r7, r9
 8006d96:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	4639      	mov	r1, r7
 8006da2:	f7f9 fa71 	bl	8000288 <__aeabi_dsub>
 8006da6:	462b      	mov	r3, r5
 8006da8:	4622      	mov	r2, r4
 8006daa:	f7f9 fa6d 	bl	8000288 <__aeabi_dsub>
 8006dae:	9b02      	ldr	r3, [sp, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006db6:	f6bf af0b 	bge.w	8006bd0 <__ieee754_rem_pio2+0x80>
 8006dba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006dbe:	f8ca 3004 	str.w	r3, [sl, #4]
 8006dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dc6:	f8ca 8000 	str.w	r8, [sl]
 8006dca:	f8ca 0008 	str.w	r0, [sl, #8]
 8006dce:	f8ca 300c 	str.w	r3, [sl, #12]
 8006dd2:	f1cb 0b00 	rsb	fp, fp, #0
 8006dd6:	e6fb      	b.n	8006bd0 <__ieee754_rem_pio2+0x80>
 8006dd8:	a327      	add	r3, pc, #156	; (adr r3, 8006e78 <__ieee754_rem_pio2+0x328>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	ec51 0b18 	vmov	r0, r1, d8
 8006de2:	f7f9 fc09 	bl	80005f8 <__aeabi_dmul>
 8006de6:	4604      	mov	r4, r0
 8006de8:	460d      	mov	r5, r1
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4640      	mov	r0, r8
 8006df0:	4649      	mov	r1, r9
 8006df2:	f7f9 fa49 	bl	8000288 <__aeabi_dsub>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460f      	mov	r7, r1
 8006dfe:	4640      	mov	r0, r8
 8006e00:	4649      	mov	r1, r9
 8006e02:	f7f9 fa41 	bl	8000288 <__aeabi_dsub>
 8006e06:	4622      	mov	r2, r4
 8006e08:	462b      	mov	r3, r5
 8006e0a:	f7f9 fa3d 	bl	8000288 <__aeabi_dsub>
 8006e0e:	a31c      	add	r3, pc, #112	; (adr r3, 8006e80 <__ieee754_rem_pio2+0x330>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	ec51 0b18 	vmov	r0, r1, d8
 8006e1c:	f7f9 fbec 	bl	80005f8 <__aeabi_dmul>
 8006e20:	4622      	mov	r2, r4
 8006e22:	462b      	mov	r3, r5
 8006e24:	f7f9 fa30 	bl	8000288 <__aeabi_dsub>
 8006e28:	4604      	mov	r4, r0
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	e760      	b.n	8006cf0 <__ieee754_rem_pio2+0x1a0>
 8006e2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ea0 <__ieee754_rem_pio2+0x350>)
 8006e30:	4598      	cmp	r8, r3
 8006e32:	dd37      	ble.n	8006ea4 <__ieee754_rem_pio2+0x354>
 8006e34:	ee10 2a10 	vmov	r2, s0
 8006e38:	462b      	mov	r3, r5
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 fa23 	bl	8000288 <__aeabi_dsub>
 8006e42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e46:	e9ca 0100 	strd	r0, r1, [sl]
 8006e4a:	e695      	b.n	8006b78 <__ieee754_rem_pio2+0x28>
 8006e4c:	f3af 8000 	nop.w
 8006e50:	54400000 	.word	0x54400000
 8006e54:	3ff921fb 	.word	0x3ff921fb
 8006e58:	1a626331 	.word	0x1a626331
 8006e5c:	3dd0b461 	.word	0x3dd0b461
 8006e60:	1a600000 	.word	0x1a600000
 8006e64:	3dd0b461 	.word	0x3dd0b461
 8006e68:	2e037073 	.word	0x2e037073
 8006e6c:	3ba3198a 	.word	0x3ba3198a
 8006e70:	6dc9c883 	.word	0x6dc9c883
 8006e74:	3fe45f30 	.word	0x3fe45f30
 8006e78:	2e000000 	.word	0x2e000000
 8006e7c:	3ba3198a 	.word	0x3ba3198a
 8006e80:	252049c1 	.word	0x252049c1
 8006e84:	397b839a 	.word	0x397b839a
 8006e88:	3fe921fb 	.word	0x3fe921fb
 8006e8c:	4002d97b 	.word	0x4002d97b
 8006e90:	3ff921fb 	.word	0x3ff921fb
 8006e94:	413921fb 	.word	0x413921fb
 8006e98:	3fe00000 	.word	0x3fe00000
 8006e9c:	080079ac 	.word	0x080079ac
 8006ea0:	7fefffff 	.word	0x7fefffff
 8006ea4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006ea8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006eac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	f7f9 fe3a 	bl	8000b2c <__aeabi_d2iz>
 8006eb8:	f7f9 fb34 	bl	8000524 <__aeabi_i2d>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ec8:	f7f9 f9de 	bl	8000288 <__aeabi_dsub>
 8006ecc:	4b21      	ldr	r3, [pc, #132]	; (8006f54 <__ieee754_rem_pio2+0x404>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f7f9 fb92 	bl	80005f8 <__aeabi_dmul>
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	f7f9 fe28 	bl	8000b2c <__aeabi_d2iz>
 8006edc:	f7f9 fb22 	bl	8000524 <__aeabi_i2d>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006eec:	f7f9 f9cc 	bl	8000288 <__aeabi_dsub>
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <__ieee754_rem_pio2+0x404>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f7f9 fb80 	bl	80005f8 <__aeabi_dmul>
 8006ef8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006efc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006f00:	2703      	movs	r7, #3
 8006f02:	2400      	movs	r4, #0
 8006f04:	2500      	movs	r5, #0
 8006f06:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	46b9      	mov	r9, r7
 8006f10:	3f01      	subs	r7, #1
 8006f12:	f7f9 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d1f5      	bne.n	8006f06 <__ieee754_rem_pio2+0x3b6>
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <__ieee754_rem_pio2+0x408>)
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	2302      	movs	r3, #2
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	4632      	mov	r2, r6
 8006f24:	464b      	mov	r3, r9
 8006f26:	4651      	mov	r1, sl
 8006f28:	a804      	add	r0, sp, #16
 8006f2a:	f000 f821 	bl	8006f70 <__kernel_rem_pio2>
 8006f2e:	9b02      	ldr	r3, [sp, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	4683      	mov	fp, r0
 8006f34:	f6bf ae4c 	bge.w	8006bd0 <__ieee754_rem_pio2+0x80>
 8006f38:	e9da 2100 	ldrd	r2, r1, [sl]
 8006f3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f40:	e9ca 2300 	strd	r2, r3, [sl]
 8006f44:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006f48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f4c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006f50:	e73f      	b.n	8006dd2 <__ieee754_rem_pio2+0x282>
 8006f52:	bf00      	nop
 8006f54:	41700000 	.word	0x41700000
 8006f58:	08007a2c 	.word	0x08007a2c

08006f5c <fabs>:
 8006f5c:	ec51 0b10 	vmov	r0, r1, d0
 8006f60:	ee10 2a10 	vmov	r2, s0
 8006f64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f68:	ec43 2b10 	vmov	d0, r2, r3
 8006f6c:	4770      	bx	lr
	...

08006f70 <__kernel_rem_pio2>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	ed2d 8b02 	vpush	{d8}
 8006f78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006f7c:	f112 0f14 	cmn.w	r2, #20
 8006f80:	9306      	str	r3, [sp, #24]
 8006f82:	9104      	str	r1, [sp, #16]
 8006f84:	4bc2      	ldr	r3, [pc, #776]	; (8007290 <__kernel_rem_pio2+0x320>)
 8006f86:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006f88:	9009      	str	r0, [sp, #36]	; 0x24
 8006f8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	9b06      	ldr	r3, [sp, #24]
 8006f92:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f96:	bfa8      	it	ge
 8006f98:	1ed4      	subge	r4, r2, #3
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	bfb2      	itee	lt
 8006f9e:	2400      	movlt	r4, #0
 8006fa0:	2318      	movge	r3, #24
 8006fa2:	fb94 f4f3 	sdivge	r4, r4, r3
 8006fa6:	f06f 0317 	mvn.w	r3, #23
 8006faa:	fb04 3303 	mla	r3, r4, r3, r3
 8006fae:	eb03 0a02 	add.w	sl, r3, r2
 8006fb2:	9b00      	ldr	r3, [sp, #0]
 8006fb4:	9a05      	ldr	r2, [sp, #20]
 8006fb6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007280 <__kernel_rem_pio2+0x310>
 8006fba:	eb03 0802 	add.w	r8, r3, r2
 8006fbe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006fc0:	1aa7      	subs	r7, r4, r2
 8006fc2:	ae20      	add	r6, sp, #128	; 0x80
 8006fc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006fc8:	2500      	movs	r5, #0
 8006fca:	4545      	cmp	r5, r8
 8006fcc:	dd13      	ble.n	8006ff6 <__kernel_rem_pio2+0x86>
 8006fce:	9b06      	ldr	r3, [sp, #24]
 8006fd0:	aa20      	add	r2, sp, #128	; 0x80
 8006fd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006fd6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006fda:	f04f 0800 	mov.w	r8, #0
 8006fde:	9b00      	ldr	r3, [sp, #0]
 8006fe0:	4598      	cmp	r8, r3
 8006fe2:	dc31      	bgt.n	8007048 <__kernel_rem_pio2+0xd8>
 8006fe4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007280 <__kernel_rem_pio2+0x310>
 8006fe8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006fec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ff0:	462f      	mov	r7, r5
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	e01b      	b.n	800702e <__kernel_rem_pio2+0xbe>
 8006ff6:	42ef      	cmn	r7, r5
 8006ff8:	d407      	bmi.n	800700a <__kernel_rem_pio2+0x9a>
 8006ffa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006ffe:	f7f9 fa91 	bl	8000524 <__aeabi_i2d>
 8007002:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007006:	3501      	adds	r5, #1
 8007008:	e7df      	b.n	8006fca <__kernel_rem_pio2+0x5a>
 800700a:	ec51 0b18 	vmov	r0, r1, d8
 800700e:	e7f8      	b.n	8007002 <__kernel_rem_pio2+0x92>
 8007010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007014:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007018:	f7f9 faee 	bl	80005f8 <__aeabi_dmul>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007024:	f7f9 f932 	bl	800028c <__adddf3>
 8007028:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800702c:	3601      	adds	r6, #1
 800702e:	9b05      	ldr	r3, [sp, #20]
 8007030:	429e      	cmp	r6, r3
 8007032:	f1a7 0708 	sub.w	r7, r7, #8
 8007036:	ddeb      	ble.n	8007010 <__kernel_rem_pio2+0xa0>
 8007038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800703c:	f108 0801 	add.w	r8, r8, #1
 8007040:	ecab 7b02 	vstmia	fp!, {d7}
 8007044:	3508      	adds	r5, #8
 8007046:	e7ca      	b.n	8006fde <__kernel_rem_pio2+0x6e>
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	aa0c      	add	r2, sp, #48	; 0x30
 800704c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007050:	930b      	str	r3, [sp, #44]	; 0x2c
 8007052:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007054:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007058:	9c00      	ldr	r4, [sp, #0]
 800705a:	930a      	str	r3, [sp, #40]	; 0x28
 800705c:	00e3      	lsls	r3, r4, #3
 800705e:	9308      	str	r3, [sp, #32]
 8007060:	ab98      	add	r3, sp, #608	; 0x260
 8007062:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007066:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800706a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800706e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007070:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007074:	46c3      	mov	fp, r8
 8007076:	46a1      	mov	r9, r4
 8007078:	f1b9 0f00 	cmp.w	r9, #0
 800707c:	f1a5 0508 	sub.w	r5, r5, #8
 8007080:	dc77      	bgt.n	8007172 <__kernel_rem_pio2+0x202>
 8007082:	ec47 6b10 	vmov	d0, r6, r7
 8007086:	4650      	mov	r0, sl
 8007088:	f000 fac2 	bl	8007610 <scalbn>
 800708c:	ec57 6b10 	vmov	r6, r7, d0
 8007090:	2200      	movs	r2, #0
 8007092:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007096:	ee10 0a10 	vmov	r0, s0
 800709a:	4639      	mov	r1, r7
 800709c:	f7f9 faac 	bl	80005f8 <__aeabi_dmul>
 80070a0:	ec41 0b10 	vmov	d0, r0, r1
 80070a4:	f000 fb34 	bl	8007710 <floor>
 80070a8:	4b7a      	ldr	r3, [pc, #488]	; (8007294 <__kernel_rem_pio2+0x324>)
 80070aa:	ec51 0b10 	vmov	r0, r1, d0
 80070ae:	2200      	movs	r2, #0
 80070b0:	f7f9 faa2 	bl	80005f8 <__aeabi_dmul>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 f8e4 	bl	8000288 <__aeabi_dsub>
 80070c0:	460f      	mov	r7, r1
 80070c2:	4606      	mov	r6, r0
 80070c4:	f7f9 fd32 	bl	8000b2c <__aeabi_d2iz>
 80070c8:	9002      	str	r0, [sp, #8]
 80070ca:	f7f9 fa2b 	bl	8000524 <__aeabi_i2d>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4630      	mov	r0, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 f8d7 	bl	8000288 <__aeabi_dsub>
 80070da:	f1ba 0f00 	cmp.w	sl, #0
 80070de:	4606      	mov	r6, r0
 80070e0:	460f      	mov	r7, r1
 80070e2:	dd6d      	ble.n	80071c0 <__kernel_rem_pio2+0x250>
 80070e4:	1e61      	subs	r1, r4, #1
 80070e6:	ab0c      	add	r3, sp, #48	; 0x30
 80070e8:	9d02      	ldr	r5, [sp, #8]
 80070ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070ee:	f1ca 0018 	rsb	r0, sl, #24
 80070f2:	fa43 f200 	asr.w	r2, r3, r0
 80070f6:	4415      	add	r5, r2
 80070f8:	4082      	lsls	r2, r0
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	aa0c      	add	r2, sp, #48	; 0x30
 80070fe:	9502      	str	r5, [sp, #8]
 8007100:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007104:	f1ca 0217 	rsb	r2, sl, #23
 8007108:	fa43 fb02 	asr.w	fp, r3, r2
 800710c:	f1bb 0f00 	cmp.w	fp, #0
 8007110:	dd65      	ble.n	80071de <__kernel_rem_pio2+0x26e>
 8007112:	9b02      	ldr	r3, [sp, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	3301      	adds	r3, #1
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	4615      	mov	r5, r2
 800711c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007120:	4294      	cmp	r4, r2
 8007122:	f300 809f 	bgt.w	8007264 <__kernel_rem_pio2+0x2f4>
 8007126:	f1ba 0f00 	cmp.w	sl, #0
 800712a:	dd07      	ble.n	800713c <__kernel_rem_pio2+0x1cc>
 800712c:	f1ba 0f01 	cmp.w	sl, #1
 8007130:	f000 80c1 	beq.w	80072b6 <__kernel_rem_pio2+0x346>
 8007134:	f1ba 0f02 	cmp.w	sl, #2
 8007138:	f000 80c7 	beq.w	80072ca <__kernel_rem_pio2+0x35a>
 800713c:	f1bb 0f02 	cmp.w	fp, #2
 8007140:	d14d      	bne.n	80071de <__kernel_rem_pio2+0x26e>
 8007142:	4632      	mov	r2, r6
 8007144:	463b      	mov	r3, r7
 8007146:	4954      	ldr	r1, [pc, #336]	; (8007298 <__kernel_rem_pio2+0x328>)
 8007148:	2000      	movs	r0, #0
 800714a:	f7f9 f89d 	bl	8000288 <__aeabi_dsub>
 800714e:	4606      	mov	r6, r0
 8007150:	460f      	mov	r7, r1
 8007152:	2d00      	cmp	r5, #0
 8007154:	d043      	beq.n	80071de <__kernel_rem_pio2+0x26e>
 8007156:	4650      	mov	r0, sl
 8007158:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007288 <__kernel_rem_pio2+0x318>
 800715c:	f000 fa58 	bl	8007610 <scalbn>
 8007160:	4630      	mov	r0, r6
 8007162:	4639      	mov	r1, r7
 8007164:	ec53 2b10 	vmov	r2, r3, d0
 8007168:	f7f9 f88e 	bl	8000288 <__aeabi_dsub>
 800716c:	4606      	mov	r6, r0
 800716e:	460f      	mov	r7, r1
 8007170:	e035      	b.n	80071de <__kernel_rem_pio2+0x26e>
 8007172:	4b4a      	ldr	r3, [pc, #296]	; (800729c <__kernel_rem_pio2+0x32c>)
 8007174:	2200      	movs	r2, #0
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 fa3d 	bl	80005f8 <__aeabi_dmul>
 800717e:	f7f9 fcd5 	bl	8000b2c <__aeabi_d2iz>
 8007182:	f7f9 f9cf 	bl	8000524 <__aeabi_i2d>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	ec43 2b18 	vmov	d8, r2, r3
 800718e:	4b44      	ldr	r3, [pc, #272]	; (80072a0 <__kernel_rem_pio2+0x330>)
 8007190:	2200      	movs	r2, #0
 8007192:	f7f9 fa31 	bl	80005f8 <__aeabi_dmul>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 f873 	bl	8000288 <__aeabi_dsub>
 80071a2:	f7f9 fcc3 	bl	8000b2c <__aeabi_d2iz>
 80071a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071aa:	f84b 0b04 	str.w	r0, [fp], #4
 80071ae:	ec51 0b18 	vmov	r0, r1, d8
 80071b2:	f7f9 f86b 	bl	800028c <__adddf3>
 80071b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80071ba:	4606      	mov	r6, r0
 80071bc:	460f      	mov	r7, r1
 80071be:	e75b      	b.n	8007078 <__kernel_rem_pio2+0x108>
 80071c0:	d106      	bne.n	80071d0 <__kernel_rem_pio2+0x260>
 80071c2:	1e63      	subs	r3, r4, #1
 80071c4:	aa0c      	add	r2, sp, #48	; 0x30
 80071c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ca:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80071ce:	e79d      	b.n	800710c <__kernel_rem_pio2+0x19c>
 80071d0:	4b34      	ldr	r3, [pc, #208]	; (80072a4 <__kernel_rem_pio2+0x334>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	f7f9 fc96 	bl	8000b04 <__aeabi_dcmpge>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d140      	bne.n	800725e <__kernel_rem_pio2+0x2ee>
 80071dc:	4683      	mov	fp, r0
 80071de:	2200      	movs	r2, #0
 80071e0:	2300      	movs	r3, #0
 80071e2:	4630      	mov	r0, r6
 80071e4:	4639      	mov	r1, r7
 80071e6:	f7f9 fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f000 80c1 	beq.w	8007372 <__kernel_rem_pio2+0x402>
 80071f0:	1e65      	subs	r5, r4, #1
 80071f2:	462b      	mov	r3, r5
 80071f4:	2200      	movs	r2, #0
 80071f6:	9900      	ldr	r1, [sp, #0]
 80071f8:	428b      	cmp	r3, r1
 80071fa:	da6d      	bge.n	80072d8 <__kernel_rem_pio2+0x368>
 80071fc:	2a00      	cmp	r2, #0
 80071fe:	f000 808a 	beq.w	8007316 <__kernel_rem_pio2+0x3a6>
 8007202:	ab0c      	add	r3, sp, #48	; 0x30
 8007204:	f1aa 0a18 	sub.w	sl, sl, #24
 8007208:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 80ae 	beq.w	800736e <__kernel_rem_pio2+0x3fe>
 8007212:	4650      	mov	r0, sl
 8007214:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007288 <__kernel_rem_pio2+0x318>
 8007218:	f000 f9fa 	bl	8007610 <scalbn>
 800721c:	1c6b      	adds	r3, r5, #1
 800721e:	00da      	lsls	r2, r3, #3
 8007220:	9205      	str	r2, [sp, #20]
 8007222:	ec57 6b10 	vmov	r6, r7, d0
 8007226:	aa70      	add	r2, sp, #448	; 0x1c0
 8007228:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800729c <__kernel_rem_pio2+0x32c>
 800722c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007230:	462c      	mov	r4, r5
 8007232:	f04f 0800 	mov.w	r8, #0
 8007236:	2c00      	cmp	r4, #0
 8007238:	f280 80d4 	bge.w	80073e4 <__kernel_rem_pio2+0x474>
 800723c:	462c      	mov	r4, r5
 800723e:	2c00      	cmp	r4, #0
 8007240:	f2c0 8102 	blt.w	8007448 <__kernel_rem_pio2+0x4d8>
 8007244:	4b18      	ldr	r3, [pc, #96]	; (80072a8 <__kernel_rem_pio2+0x338>)
 8007246:	461e      	mov	r6, r3
 8007248:	ab70      	add	r3, sp, #448	; 0x1c0
 800724a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800724e:	1b2b      	subs	r3, r5, r4
 8007250:	f04f 0900 	mov.w	r9, #0
 8007254:	f04f 0a00 	mov.w	sl, #0
 8007258:	2700      	movs	r7, #0
 800725a:	9306      	str	r3, [sp, #24]
 800725c:	e0e6      	b.n	800742c <__kernel_rem_pio2+0x4bc>
 800725e:	f04f 0b02 	mov.w	fp, #2
 8007262:	e756      	b.n	8007112 <__kernel_rem_pio2+0x1a2>
 8007264:	f8d8 3000 	ldr.w	r3, [r8]
 8007268:	bb05      	cbnz	r5, 80072ac <__kernel_rem_pio2+0x33c>
 800726a:	b123      	cbz	r3, 8007276 <__kernel_rem_pio2+0x306>
 800726c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007270:	f8c8 3000 	str.w	r3, [r8]
 8007274:	2301      	movs	r3, #1
 8007276:	3201      	adds	r2, #1
 8007278:	f108 0804 	add.w	r8, r8, #4
 800727c:	461d      	mov	r5, r3
 800727e:	e74f      	b.n	8007120 <__kernel_rem_pio2+0x1b0>
	...
 800728c:	3ff00000 	.word	0x3ff00000
 8007290:	08007b78 	.word	0x08007b78
 8007294:	40200000 	.word	0x40200000
 8007298:	3ff00000 	.word	0x3ff00000
 800729c:	3e700000 	.word	0x3e700000
 80072a0:	41700000 	.word	0x41700000
 80072a4:	3fe00000 	.word	0x3fe00000
 80072a8:	08007b38 	.word	0x08007b38
 80072ac:	1acb      	subs	r3, r1, r3
 80072ae:	f8c8 3000 	str.w	r3, [r8]
 80072b2:	462b      	mov	r3, r5
 80072b4:	e7df      	b.n	8007276 <__kernel_rem_pio2+0x306>
 80072b6:	1e62      	subs	r2, r4, #1
 80072b8:	ab0c      	add	r3, sp, #48	; 0x30
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80072c2:	a90c      	add	r1, sp, #48	; 0x30
 80072c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80072c8:	e738      	b.n	800713c <__kernel_rem_pio2+0x1cc>
 80072ca:	1e62      	subs	r2, r4, #1
 80072cc:	ab0c      	add	r3, sp, #48	; 0x30
 80072ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80072d6:	e7f4      	b.n	80072c2 <__kernel_rem_pio2+0x352>
 80072d8:	a90c      	add	r1, sp, #48	; 0x30
 80072da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80072de:	3b01      	subs	r3, #1
 80072e0:	430a      	orrs	r2, r1
 80072e2:	e788      	b.n	80071f6 <__kernel_rem_pio2+0x286>
 80072e4:	3301      	adds	r3, #1
 80072e6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80072ea:	2900      	cmp	r1, #0
 80072ec:	d0fa      	beq.n	80072e4 <__kernel_rem_pio2+0x374>
 80072ee:	9a08      	ldr	r2, [sp, #32]
 80072f0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80072f4:	446a      	add	r2, sp
 80072f6:	3a98      	subs	r2, #152	; 0x98
 80072f8:	9208      	str	r2, [sp, #32]
 80072fa:	9a06      	ldr	r2, [sp, #24]
 80072fc:	a920      	add	r1, sp, #128	; 0x80
 80072fe:	18a2      	adds	r2, r4, r2
 8007300:	18e3      	adds	r3, r4, r3
 8007302:	f104 0801 	add.w	r8, r4, #1
 8007306:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800730a:	9302      	str	r3, [sp, #8]
 800730c:	9b02      	ldr	r3, [sp, #8]
 800730e:	4543      	cmp	r3, r8
 8007310:	da04      	bge.n	800731c <__kernel_rem_pio2+0x3ac>
 8007312:	461c      	mov	r4, r3
 8007314:	e6a2      	b.n	800705c <__kernel_rem_pio2+0xec>
 8007316:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007318:	2301      	movs	r3, #1
 800731a:	e7e4      	b.n	80072e6 <__kernel_rem_pio2+0x376>
 800731c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800731e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007322:	f7f9 f8ff 	bl	8000524 <__aeabi_i2d>
 8007326:	e8e5 0102 	strd	r0, r1, [r5], #8
 800732a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732c:	46ab      	mov	fp, r5
 800732e:	461c      	mov	r4, r3
 8007330:	f04f 0900 	mov.w	r9, #0
 8007334:	2600      	movs	r6, #0
 8007336:	2700      	movs	r7, #0
 8007338:	9b05      	ldr	r3, [sp, #20]
 800733a:	4599      	cmp	r9, r3
 800733c:	dd06      	ble.n	800734c <__kernel_rem_pio2+0x3dc>
 800733e:	9b08      	ldr	r3, [sp, #32]
 8007340:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007344:	f108 0801 	add.w	r8, r8, #1
 8007348:	9308      	str	r3, [sp, #32]
 800734a:	e7df      	b.n	800730c <__kernel_rem_pio2+0x39c>
 800734c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007350:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007354:	f7f9 f950 	bl	80005f8 <__aeabi_dmul>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4630      	mov	r0, r6
 800735e:	4639      	mov	r1, r7
 8007360:	f7f8 ff94 	bl	800028c <__adddf3>
 8007364:	f109 0901 	add.w	r9, r9, #1
 8007368:	4606      	mov	r6, r0
 800736a:	460f      	mov	r7, r1
 800736c:	e7e4      	b.n	8007338 <__kernel_rem_pio2+0x3c8>
 800736e:	3d01      	subs	r5, #1
 8007370:	e747      	b.n	8007202 <__kernel_rem_pio2+0x292>
 8007372:	ec47 6b10 	vmov	d0, r6, r7
 8007376:	f1ca 0000 	rsb	r0, sl, #0
 800737a:	f000 f949 	bl	8007610 <scalbn>
 800737e:	ec57 6b10 	vmov	r6, r7, d0
 8007382:	4ba0      	ldr	r3, [pc, #640]	; (8007604 <__kernel_rem_pio2+0x694>)
 8007384:	ee10 0a10 	vmov	r0, s0
 8007388:	2200      	movs	r2, #0
 800738a:	4639      	mov	r1, r7
 800738c:	f7f9 fbba 	bl	8000b04 <__aeabi_dcmpge>
 8007390:	b1f8      	cbz	r0, 80073d2 <__kernel_rem_pio2+0x462>
 8007392:	4b9d      	ldr	r3, [pc, #628]	; (8007608 <__kernel_rem_pio2+0x698>)
 8007394:	2200      	movs	r2, #0
 8007396:	4630      	mov	r0, r6
 8007398:	4639      	mov	r1, r7
 800739a:	f7f9 f92d 	bl	80005f8 <__aeabi_dmul>
 800739e:	f7f9 fbc5 	bl	8000b2c <__aeabi_d2iz>
 80073a2:	4680      	mov	r8, r0
 80073a4:	f7f9 f8be 	bl	8000524 <__aeabi_i2d>
 80073a8:	4b96      	ldr	r3, [pc, #600]	; (8007604 <__kernel_rem_pio2+0x694>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	f7f9 f924 	bl	80005f8 <__aeabi_dmul>
 80073b0:	460b      	mov	r3, r1
 80073b2:	4602      	mov	r2, r0
 80073b4:	4639      	mov	r1, r7
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7f8 ff66 	bl	8000288 <__aeabi_dsub>
 80073bc:	f7f9 fbb6 	bl	8000b2c <__aeabi_d2iz>
 80073c0:	1c65      	adds	r5, r4, #1
 80073c2:	ab0c      	add	r3, sp, #48	; 0x30
 80073c4:	f10a 0a18 	add.w	sl, sl, #24
 80073c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80073cc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80073d0:	e71f      	b.n	8007212 <__kernel_rem_pio2+0x2a2>
 80073d2:	4630      	mov	r0, r6
 80073d4:	4639      	mov	r1, r7
 80073d6:	f7f9 fba9 	bl	8000b2c <__aeabi_d2iz>
 80073da:	ab0c      	add	r3, sp, #48	; 0x30
 80073dc:	4625      	mov	r5, r4
 80073de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80073e2:	e716      	b.n	8007212 <__kernel_rem_pio2+0x2a2>
 80073e4:	ab0c      	add	r3, sp, #48	; 0x30
 80073e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80073ea:	f7f9 f89b 	bl	8000524 <__aeabi_i2d>
 80073ee:	4632      	mov	r2, r6
 80073f0:	463b      	mov	r3, r7
 80073f2:	f7f9 f901 	bl	80005f8 <__aeabi_dmul>
 80073f6:	4642      	mov	r2, r8
 80073f8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80073fc:	464b      	mov	r3, r9
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
 8007402:	f7f9 f8f9 	bl	80005f8 <__aeabi_dmul>
 8007406:	3c01      	subs	r4, #1
 8007408:	4606      	mov	r6, r0
 800740a:	460f      	mov	r7, r1
 800740c:	e713      	b.n	8007236 <__kernel_rem_pio2+0x2c6>
 800740e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007412:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007416:	f7f9 f8ef 	bl	80005f8 <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4648      	mov	r0, r9
 8007420:	4651      	mov	r1, sl
 8007422:	f7f8 ff33 	bl	800028c <__adddf3>
 8007426:	3701      	adds	r7, #1
 8007428:	4681      	mov	r9, r0
 800742a:	468a      	mov	sl, r1
 800742c:	9b00      	ldr	r3, [sp, #0]
 800742e:	429f      	cmp	r7, r3
 8007430:	dc02      	bgt.n	8007438 <__kernel_rem_pio2+0x4c8>
 8007432:	9b06      	ldr	r3, [sp, #24]
 8007434:	429f      	cmp	r7, r3
 8007436:	ddea      	ble.n	800740e <__kernel_rem_pio2+0x49e>
 8007438:	9a06      	ldr	r2, [sp, #24]
 800743a:	ab48      	add	r3, sp, #288	; 0x120
 800743c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007440:	e9c6 9a00 	strd	r9, sl, [r6]
 8007444:	3c01      	subs	r4, #1
 8007446:	e6fa      	b.n	800723e <__kernel_rem_pio2+0x2ce>
 8007448:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800744a:	2b02      	cmp	r3, #2
 800744c:	dc0b      	bgt.n	8007466 <__kernel_rem_pio2+0x4f6>
 800744e:	2b00      	cmp	r3, #0
 8007450:	dc39      	bgt.n	80074c6 <__kernel_rem_pio2+0x556>
 8007452:	d05d      	beq.n	8007510 <__kernel_rem_pio2+0x5a0>
 8007454:	9b02      	ldr	r3, [sp, #8]
 8007456:	f003 0007 	and.w	r0, r3, #7
 800745a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800745e:	ecbd 8b02 	vpop	{d8}
 8007462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007468:	2b03      	cmp	r3, #3
 800746a:	d1f3      	bne.n	8007454 <__kernel_rem_pio2+0x4e4>
 800746c:	9b05      	ldr	r3, [sp, #20]
 800746e:	9500      	str	r5, [sp, #0]
 8007470:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007474:	eb0d 0403 	add.w	r4, sp, r3
 8007478:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800747c:	46a2      	mov	sl, r4
 800747e:	9b00      	ldr	r3, [sp, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f1aa 0a08 	sub.w	sl, sl, #8
 8007486:	dc69      	bgt.n	800755c <__kernel_rem_pio2+0x5ec>
 8007488:	46aa      	mov	sl, r5
 800748a:	f1ba 0f01 	cmp.w	sl, #1
 800748e:	f1a4 0408 	sub.w	r4, r4, #8
 8007492:	f300 8083 	bgt.w	800759c <__kernel_rem_pio2+0x62c>
 8007496:	9c05      	ldr	r4, [sp, #20]
 8007498:	ab48      	add	r3, sp, #288	; 0x120
 800749a:	441c      	add	r4, r3
 800749c:	2000      	movs	r0, #0
 800749e:	2100      	movs	r1, #0
 80074a0:	2d01      	cmp	r5, #1
 80074a2:	f300 809a 	bgt.w	80075da <__kernel_rem_pio2+0x66a>
 80074a6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80074aa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80074ae:	f1bb 0f00 	cmp.w	fp, #0
 80074b2:	f040 8098 	bne.w	80075e6 <__kernel_rem_pio2+0x676>
 80074b6:	9b04      	ldr	r3, [sp, #16]
 80074b8:	e9c3 7800 	strd	r7, r8, [r3]
 80074bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80074c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80074c4:	e7c6      	b.n	8007454 <__kernel_rem_pio2+0x4e4>
 80074c6:	9e05      	ldr	r6, [sp, #20]
 80074c8:	ab48      	add	r3, sp, #288	; 0x120
 80074ca:	441e      	add	r6, r3
 80074cc:	462c      	mov	r4, r5
 80074ce:	2000      	movs	r0, #0
 80074d0:	2100      	movs	r1, #0
 80074d2:	2c00      	cmp	r4, #0
 80074d4:	da33      	bge.n	800753e <__kernel_rem_pio2+0x5ce>
 80074d6:	f1bb 0f00 	cmp.w	fp, #0
 80074da:	d036      	beq.n	800754a <__kernel_rem_pio2+0x5da>
 80074dc:	4602      	mov	r2, r0
 80074de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074e2:	9c04      	ldr	r4, [sp, #16]
 80074e4:	e9c4 2300 	strd	r2, r3, [r4]
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80074f0:	f7f8 feca 	bl	8000288 <__aeabi_dsub>
 80074f4:	ae4a      	add	r6, sp, #296	; 0x128
 80074f6:	2401      	movs	r4, #1
 80074f8:	42a5      	cmp	r5, r4
 80074fa:	da29      	bge.n	8007550 <__kernel_rem_pio2+0x5e0>
 80074fc:	f1bb 0f00 	cmp.w	fp, #0
 8007500:	d002      	beq.n	8007508 <__kernel_rem_pio2+0x598>
 8007502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007506:	4619      	mov	r1, r3
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800750e:	e7a1      	b.n	8007454 <__kernel_rem_pio2+0x4e4>
 8007510:	9c05      	ldr	r4, [sp, #20]
 8007512:	ab48      	add	r3, sp, #288	; 0x120
 8007514:	441c      	add	r4, r3
 8007516:	2000      	movs	r0, #0
 8007518:	2100      	movs	r1, #0
 800751a:	2d00      	cmp	r5, #0
 800751c:	da09      	bge.n	8007532 <__kernel_rem_pio2+0x5c2>
 800751e:	f1bb 0f00 	cmp.w	fp, #0
 8007522:	d002      	beq.n	800752a <__kernel_rem_pio2+0x5ba>
 8007524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007528:	4619      	mov	r1, r3
 800752a:	9b04      	ldr	r3, [sp, #16]
 800752c:	e9c3 0100 	strd	r0, r1, [r3]
 8007530:	e790      	b.n	8007454 <__kernel_rem_pio2+0x4e4>
 8007532:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007536:	f7f8 fea9 	bl	800028c <__adddf3>
 800753a:	3d01      	subs	r5, #1
 800753c:	e7ed      	b.n	800751a <__kernel_rem_pio2+0x5aa>
 800753e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007542:	f7f8 fea3 	bl	800028c <__adddf3>
 8007546:	3c01      	subs	r4, #1
 8007548:	e7c3      	b.n	80074d2 <__kernel_rem_pio2+0x562>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	e7c8      	b.n	80074e2 <__kernel_rem_pio2+0x572>
 8007550:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007554:	f7f8 fe9a 	bl	800028c <__adddf3>
 8007558:	3401      	adds	r4, #1
 800755a:	e7cd      	b.n	80074f8 <__kernel_rem_pio2+0x588>
 800755c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007560:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007564:	9b00      	ldr	r3, [sp, #0]
 8007566:	3b01      	subs	r3, #1
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	4632      	mov	r2, r6
 800756c:	463b      	mov	r3, r7
 800756e:	4640      	mov	r0, r8
 8007570:	4649      	mov	r1, r9
 8007572:	f7f8 fe8b 	bl	800028c <__adddf3>
 8007576:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4640      	mov	r0, r8
 8007580:	4649      	mov	r1, r9
 8007582:	f7f8 fe81 	bl	8000288 <__aeabi_dsub>
 8007586:	4632      	mov	r2, r6
 8007588:	463b      	mov	r3, r7
 800758a:	f7f8 fe7f 	bl	800028c <__adddf3>
 800758e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007592:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007596:	ed8a 7b00 	vstr	d7, [sl]
 800759a:	e770      	b.n	800747e <__kernel_rem_pio2+0x50e>
 800759c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80075a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80075a4:	4640      	mov	r0, r8
 80075a6:	4632      	mov	r2, r6
 80075a8:	463b      	mov	r3, r7
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f8 fe6e 	bl	800028c <__adddf3>
 80075b0:	e9cd 0100 	strd	r0, r1, [sp]
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f8 fe64 	bl	8000288 <__aeabi_dsub>
 80075c0:	4632      	mov	r2, r6
 80075c2:	463b      	mov	r3, r7
 80075c4:	f7f8 fe62 	bl	800028c <__adddf3>
 80075c8:	ed9d 7b00 	vldr	d7, [sp]
 80075cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80075d0:	ed84 7b00 	vstr	d7, [r4]
 80075d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075d8:	e757      	b.n	800748a <__kernel_rem_pio2+0x51a>
 80075da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80075de:	f7f8 fe55 	bl	800028c <__adddf3>
 80075e2:	3d01      	subs	r5, #1
 80075e4:	e75c      	b.n	80074a0 <__kernel_rem_pio2+0x530>
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	9a04      	ldr	r2, [sp, #16]
 80075ea:	601f      	str	r7, [r3, #0]
 80075ec:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80075f0:	605c      	str	r4, [r3, #4]
 80075f2:	609d      	str	r5, [r3, #8]
 80075f4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80075f8:	60d3      	str	r3, [r2, #12]
 80075fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075fe:	6110      	str	r0, [r2, #16]
 8007600:	6153      	str	r3, [r2, #20]
 8007602:	e727      	b.n	8007454 <__kernel_rem_pio2+0x4e4>
 8007604:	41700000 	.word	0x41700000
 8007608:	3e700000 	.word	0x3e700000
 800760c:	00000000 	.word	0x00000000

08007610 <scalbn>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	ec55 4b10 	vmov	r4, r5, d0
 8007616:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800761a:	4606      	mov	r6, r0
 800761c:	462b      	mov	r3, r5
 800761e:	b999      	cbnz	r1, 8007648 <scalbn+0x38>
 8007620:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007624:	4323      	orrs	r3, r4
 8007626:	d03f      	beq.n	80076a8 <scalbn+0x98>
 8007628:	4b35      	ldr	r3, [pc, #212]	; (8007700 <scalbn+0xf0>)
 800762a:	4629      	mov	r1, r5
 800762c:	ee10 0a10 	vmov	r0, s0
 8007630:	2200      	movs	r2, #0
 8007632:	f7f8 ffe1 	bl	80005f8 <__aeabi_dmul>
 8007636:	4b33      	ldr	r3, [pc, #204]	; (8007704 <scalbn+0xf4>)
 8007638:	429e      	cmp	r6, r3
 800763a:	4604      	mov	r4, r0
 800763c:	460d      	mov	r5, r1
 800763e:	da10      	bge.n	8007662 <scalbn+0x52>
 8007640:	a327      	add	r3, pc, #156	; (adr r3, 80076e0 <scalbn+0xd0>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	e01f      	b.n	8007688 <scalbn+0x78>
 8007648:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800764c:	4291      	cmp	r1, r2
 800764e:	d10c      	bne.n	800766a <scalbn+0x5a>
 8007650:	ee10 2a10 	vmov	r2, s0
 8007654:	4620      	mov	r0, r4
 8007656:	4629      	mov	r1, r5
 8007658:	f7f8 fe18 	bl	800028c <__adddf3>
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	e022      	b.n	80076a8 <scalbn+0x98>
 8007662:	460b      	mov	r3, r1
 8007664:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007668:	3936      	subs	r1, #54	; 0x36
 800766a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800766e:	4296      	cmp	r6, r2
 8007670:	dd0d      	ble.n	800768e <scalbn+0x7e>
 8007672:	2d00      	cmp	r5, #0
 8007674:	a11c      	add	r1, pc, #112	; (adr r1, 80076e8 <scalbn+0xd8>)
 8007676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800767a:	da02      	bge.n	8007682 <scalbn+0x72>
 800767c:	a11c      	add	r1, pc, #112	; (adr r1, 80076f0 <scalbn+0xe0>)
 800767e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007682:	a319      	add	r3, pc, #100	; (adr r3, 80076e8 <scalbn+0xd8>)
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f7f8 ffb6 	bl	80005f8 <__aeabi_dmul>
 800768c:	e7e6      	b.n	800765c <scalbn+0x4c>
 800768e:	1872      	adds	r2, r6, r1
 8007690:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007694:	428a      	cmp	r2, r1
 8007696:	dcec      	bgt.n	8007672 <scalbn+0x62>
 8007698:	2a00      	cmp	r2, #0
 800769a:	dd08      	ble.n	80076ae <scalbn+0x9e>
 800769c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80076a8:	ec45 4b10 	vmov	d0, r4, r5
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80076b2:	da08      	bge.n	80076c6 <scalbn+0xb6>
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	a10a      	add	r1, pc, #40	; (adr r1, 80076e0 <scalbn+0xd0>)
 80076b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076bc:	dac0      	bge.n	8007640 <scalbn+0x30>
 80076be:	a10e      	add	r1, pc, #56	; (adr r1, 80076f8 <scalbn+0xe8>)
 80076c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c4:	e7bc      	b.n	8007640 <scalbn+0x30>
 80076c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076ca:	3236      	adds	r2, #54	; 0x36
 80076cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80076d4:	4620      	mov	r0, r4
 80076d6:	4b0c      	ldr	r3, [pc, #48]	; (8007708 <scalbn+0xf8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	e7d5      	b.n	8007688 <scalbn+0x78>
 80076dc:	f3af 8000 	nop.w
 80076e0:	c2f8f359 	.word	0xc2f8f359
 80076e4:	01a56e1f 	.word	0x01a56e1f
 80076e8:	8800759c 	.word	0x8800759c
 80076ec:	7e37e43c 	.word	0x7e37e43c
 80076f0:	8800759c 	.word	0x8800759c
 80076f4:	fe37e43c 	.word	0xfe37e43c
 80076f8:	c2f8f359 	.word	0xc2f8f359
 80076fc:	81a56e1f 	.word	0x81a56e1f
 8007700:	43500000 	.word	0x43500000
 8007704:	ffff3cb0 	.word	0xffff3cb0
 8007708:	3c900000 	.word	0x3c900000
 800770c:	00000000 	.word	0x00000000

08007710 <floor>:
 8007710:	ec51 0b10 	vmov	r0, r1, d0
 8007714:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007720:	2e13      	cmp	r6, #19
 8007722:	ee10 5a10 	vmov	r5, s0
 8007726:	ee10 8a10 	vmov	r8, s0
 800772a:	460c      	mov	r4, r1
 800772c:	dc31      	bgt.n	8007792 <floor+0x82>
 800772e:	2e00      	cmp	r6, #0
 8007730:	da14      	bge.n	800775c <floor+0x4c>
 8007732:	a333      	add	r3, pc, #204	; (adr r3, 8007800 <floor+0xf0>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f7f8 fda8 	bl	800028c <__adddf3>
 800773c:	2200      	movs	r2, #0
 800773e:	2300      	movs	r3, #0
 8007740:	f7f9 f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 8007744:	b138      	cbz	r0, 8007756 <floor+0x46>
 8007746:	2c00      	cmp	r4, #0
 8007748:	da53      	bge.n	80077f2 <floor+0xe2>
 800774a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800774e:	4325      	orrs	r5, r4
 8007750:	d052      	beq.n	80077f8 <floor+0xe8>
 8007752:	4c2d      	ldr	r4, [pc, #180]	; (8007808 <floor+0xf8>)
 8007754:	2500      	movs	r5, #0
 8007756:	4621      	mov	r1, r4
 8007758:	4628      	mov	r0, r5
 800775a:	e024      	b.n	80077a6 <floor+0x96>
 800775c:	4f2b      	ldr	r7, [pc, #172]	; (800780c <floor+0xfc>)
 800775e:	4137      	asrs	r7, r6
 8007760:	ea01 0307 	and.w	r3, r1, r7
 8007764:	4303      	orrs	r3, r0
 8007766:	d01e      	beq.n	80077a6 <floor+0x96>
 8007768:	a325      	add	r3, pc, #148	; (adr r3, 8007800 <floor+0xf0>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f8 fd8d 	bl	800028c <__adddf3>
 8007772:	2200      	movs	r2, #0
 8007774:	2300      	movs	r3, #0
 8007776:	f7f9 f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800777a:	2800      	cmp	r0, #0
 800777c:	d0eb      	beq.n	8007756 <floor+0x46>
 800777e:	2c00      	cmp	r4, #0
 8007780:	bfbe      	ittt	lt
 8007782:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007786:	4133      	asrlt	r3, r6
 8007788:	18e4      	addlt	r4, r4, r3
 800778a:	ea24 0407 	bic.w	r4, r4, r7
 800778e:	2500      	movs	r5, #0
 8007790:	e7e1      	b.n	8007756 <floor+0x46>
 8007792:	2e33      	cmp	r6, #51	; 0x33
 8007794:	dd0b      	ble.n	80077ae <floor+0x9e>
 8007796:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800779a:	d104      	bne.n	80077a6 <floor+0x96>
 800779c:	ee10 2a10 	vmov	r2, s0
 80077a0:	460b      	mov	r3, r1
 80077a2:	f7f8 fd73 	bl	800028c <__adddf3>
 80077a6:	ec41 0b10 	vmov	d0, r0, r1
 80077aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80077b2:	f04f 37ff 	mov.w	r7, #4294967295
 80077b6:	40df      	lsrs	r7, r3
 80077b8:	4238      	tst	r0, r7
 80077ba:	d0f4      	beq.n	80077a6 <floor+0x96>
 80077bc:	a310      	add	r3, pc, #64	; (adr r3, 8007800 <floor+0xf0>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	f7f8 fd63 	bl	800028c <__adddf3>
 80077c6:	2200      	movs	r2, #0
 80077c8:	2300      	movs	r3, #0
 80077ca:	f7f9 f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d0c1      	beq.n	8007756 <floor+0x46>
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	da0a      	bge.n	80077ec <floor+0xdc>
 80077d6:	2e14      	cmp	r6, #20
 80077d8:	d101      	bne.n	80077de <floor+0xce>
 80077da:	3401      	adds	r4, #1
 80077dc:	e006      	b.n	80077ec <floor+0xdc>
 80077de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80077e2:	2301      	movs	r3, #1
 80077e4:	40b3      	lsls	r3, r6
 80077e6:	441d      	add	r5, r3
 80077e8:	45a8      	cmp	r8, r5
 80077ea:	d8f6      	bhi.n	80077da <floor+0xca>
 80077ec:	ea25 0507 	bic.w	r5, r5, r7
 80077f0:	e7b1      	b.n	8007756 <floor+0x46>
 80077f2:	2500      	movs	r5, #0
 80077f4:	462c      	mov	r4, r5
 80077f6:	e7ae      	b.n	8007756 <floor+0x46>
 80077f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80077fc:	e7ab      	b.n	8007756 <floor+0x46>
 80077fe:	bf00      	nop
 8007800:	8800759c 	.word	0x8800759c
 8007804:	7e37e43c 	.word	0x7e37e43c
 8007808:	bff00000 	.word	0xbff00000
 800780c:	000fffff 	.word	0x000fffff

08007810 <_init>:
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007812:	bf00      	nop
 8007814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007816:	bc08      	pop	{r3}
 8007818:	469e      	mov	lr, r3
 800781a:	4770      	bx	lr

0800781c <_fini>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	bf00      	nop
 8007820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007822:	bc08      	pop	{r3}
 8007824:	469e      	mov	lr, r3
 8007826:	4770      	bx	lr
